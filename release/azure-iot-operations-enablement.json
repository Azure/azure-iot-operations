{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.30.23.60470",
      "templateHash": "7995831049546950052"
    }
  },
  "definitions": {
    "_1.AdvancedConfig": {
      "type": "object",
      "properties": {
        "platform": {
          "type": "object",
          "properties": {
            "version": {
              "type": "string",
              "nullable": true
            },
            "train": {
              "type": "string",
              "nullable": true
            }
          },
          "nullable": true
        },
        "aio": {
          "type": "object",
          "properties": {
            "version": {
              "type": "string",
              "nullable": true
            },
            "train": {
              "type": "string",
              "nullable": true
            },
            "configurationSettingsOverride": {
              "type": "object",
              "nullable": true
            }
          },
          "nullable": true
        },
        "secretSyncController": {
          "type": "object",
          "properties": {
            "version": {
              "type": "string",
              "nullable": true
            },
            "train": {
              "type": "string",
              "nullable": true
            }
          },
          "nullable": true
        },
        "observability": {
          "type": "object",
          "properties": {
            "otelCollectorAddress": {
              "type": "string",
              "nullable": true
            },
            "otelExportIntervalSeconds": {
              "type": "int",
              "nullable": true
            }
          },
          "nullable": true
        },
        "openServiceMesh": {
          "type": "object",
          "properties": {
            "version": {
              "type": "string",
              "nullable": true
            },
            "train": {
              "type": "string",
              "nullable": true
            }
          },
          "nullable": true
        },
        "edgeStorageAccelerator": {
          "type": "object",
          "properties": {
            "version": {
              "type": "string",
              "nullable": true
            },
            "train": {
              "type": "string",
              "nullable": true
            },
            "diskStorageClass": {
              "type": "string",
              "nullable": true
            },
            "faultToleranceEnabled": {
              "type": "bool",
              "nullable": true
            }
          },
          "nullable": true
        },
        "resourceSuffix": {
          "type": "string",
          "nullable": true
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "types.bicep"
        }
      }
    },
    "_1.BrokerConfig": {
      "type": "object",
      "properties": {
        "frontendReplicas": {
          "type": "int",
          "nullable": true,
          "minValue": 1,
          "maxValue": 16,
          "metadata": {
            "description": "Number of AIO Broker frontend replicas. The default is 2."
          }
        },
        "frontendWorkers": {
          "type": "int",
          "nullable": true,
          "minValue": 1,
          "maxValue": 16,
          "metadata": {
            "description": "Number of AIO Broker frontend workers. The default is 2."
          }
        },
        "backendRedundancyFactor": {
          "type": "int",
          "nullable": true,
          "minValue": 1,
          "maxValue": 5,
          "metadata": {
            "description": "The AIO Broker backend redundancy factory. The default is 2."
          }
        },
        "backendWorkers": {
          "type": "int",
          "nullable": true,
          "minValue": 1,
          "maxValue": 16,
          "metadata": {
            "description": "Number of AIO Broker backend workers. The default is 2."
          }
        },
        "backendPartitions": {
          "type": "int",
          "nullable": true,
          "minValue": 1,
          "maxValue": 16,
          "metadata": {
            "description": "Number of AIO Broker backend partitions. The default is 2."
          }
        },
        "memoryProfile": {
          "type": "string",
          "allowedValues": [
            "High",
            "Low",
            "Medium",
            "Tiny"
          ],
          "nullable": true,
          "metadata": {
            "description": "The AIO Broker memory profile. The default is \"Medium\"."
          }
        },
        "serviceType": {
          "type": "string",
          "allowedValues": [
            "ClusterIp",
            "LoadBalancer",
            "NodePort"
          ],
          "nullable": true,
          "metadata": {
            "description": "The AIO Broker service type. The default is \"ClusterIp\"."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "types.bicep"
        }
      }
    },
    "_1.CustomerManaged": {
      "type": "object",
      "properties": {
        "source": {
          "type": "string",
          "allowedValues": [
            "CustomerManaged"
          ]
        },
        "settings": {
          "$ref": "#/definitions/_1.TrustBundleSettings"
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "types.bicep"
        }
      }
    },
    "_1.SelfSigned": {
      "type": "object",
      "properties": {
        "source": {
          "type": "string",
          "allowedValues": [
            "SelfSigned"
          ]
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "types.bicep"
        }
      }
    },
    "_1.TrustBundleSettings": {
      "type": "object",
      "properties": {
        "issuerName": {
          "type": "string"
        },
        "issuerKind": {
          "type": "string",
          "allowedValues": [
            "ClusterIssuer",
            "Issuer"
          ]
        },
        "configMapName": {
          "type": "string"
        },
        "configMapKey": {
          "type": "string"
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "types.bicep"
        }
      }
    },
    "_1.TrustConfig": {
      "type": "object",
      "discriminator": {
        "propertyName": "source",
        "mapping": {
          "SelfSigned": {
            "$ref": "#/definitions/_1.SelfSigned"
          },
          "CustomerManaged": {
            "$ref": "#/definitions/_1.CustomerManaged"
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "types.bicep"
        }
      }
    }
  },
  "parameters": {
    "clusterName": {
      "type": "string",
      "metadata": {
        "description": "Name of the existing arc-enabled cluster where AIO will be deployed."
      }
    },
    "kubernetesDistro": {
      "type": "string",
      "defaultValue": "K8s",
      "allowedValues": [
        "K3s",
        "K8s",
        "MicroK8s"
      ],
      "metadata": {
        "description": "The Kubernetes distro to run AIO on. The default is k8s."
      }
    },
    "containerRuntimeSocket": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The default node path of the container runtime socket. The default is empty.\nIf it's empty, socket path is determined by param kubernetesDistro.\n"
      }
    },
    "trustConfig": {
      "$ref": "#/definitions/_1.TrustConfig",
      "defaultValue": {
        "source": "SelfSigned"
      },
      "metadata": {
        "description": "Trust bundle config for AIO."
      }
    },
    "schemaRegistryId": {
      "type": "string",
      "metadata": {
        "description": "Schema Registry Id to be passed in to the Schema Registry."
      }
    },
    "advancedConfig": {
      "$ref": "#/definitions/_1.AdvancedConfig",
      "defaultValue": {},
      "metadata": {
        "description": "Advanced Configuration for development"
      }
    }
  },
  "variables": {
    "AIO_EXTENSION_SCOPE": {
      "cluster": {
        "releaseNamespace": "azure-iot-operations"
      }
    },
    "AIO_EXTENSION_SUFFIX": "[take(uniqueString(resourceId('Microsoft.Kubernetes/connectedClusters', parameters('clusterName'))), 5)]",
    "VERSIONS": {
      "platform": "0.7.6",
      "aio": "0.7.31",
      "secretSyncController": "0.6.4",
      "edgeStorageAccelerator": "2.1.1-preview",
      "openServiceMesh": "1.2.9"
    },
    "TRAINS": {
      "platform": "preview",
      "aio": "preview",
      "secretSyncController": "preview",
      "openServiceMesh": "stable",
      "edgeStorageAccelerator": "stable"
    },
    "OBSERVABILITY_ENABLED": "[not(equals(tryGet(tryGet(parameters('advancedConfig'), 'observability'), 'otelCollectorAddress'), null()))]",
    "MQTT_SETTINGS": {
      "brokerListenerServiceName": "aio-broker",
      "brokerListenerPort": 18883,
      "serviceAccountAudience": "aio-internal",
      "selfSignedIssuerName": "[format('{0}-aio-certificate-issuer', variables('AIO_EXTENSION_SCOPE').cluster.releaseNamespace)]"
    },
    "faultTolerantStorageClass": "[coalesce(tryGet(tryGet(parameters('advancedConfig'), 'edgeStorageAccelerator'), 'diskStorageClass'), 'acstor-arccontainerstorage-storage-pool')]",
    "nonFaultTolerantStorageClass": "[coalesce(tryGet(tryGet(parameters('advancedConfig'), 'edgeStorageAccelerator'), 'diskStorageClass'), 'default,local-path')]",
    "kubernetesStorageClass": "[if(equals(tryGet(tryGet(parameters('advancedConfig'), 'edgeStorageAccelerator'), 'faultToleranceEnabled'), true()), variables('faultTolerantStorageClass'), variables('nonFaultTolerantStorageClass'))]",
    "defaultAioConfigurationSettings": {
      "AgentOperationTimeoutInMinutes": 120,
      "connectors.values.mqttBroker.address": "[format('mqtts://{0}.{1}:{2}', variables('MQTT_SETTINGS').brokerListenerServiceName, variables('AIO_EXTENSION_SCOPE').cluster.releaseNamespace, variables('MQTT_SETTINGS').brokerListenerPort)]",
      "connectors.values.mqttBroker.serviceAccountTokenAudience": "[variables('MQTT_SETTINGS').serviceAccountAudience]",
      "connectors.values.opcPlcSimulation.deploy": "false",
      "connectors.values.opcPlcSimulation.autoAcceptUntrustedCertificates": "false",
      "connectors.values.discoveryHandler.enabled": "false",
      "adr.values.Microsoft.CustomLocation.ServiceAccount": "default",
      "akri.values.webhookConfiguration.enabled": "false",
      "akri.values.certManagerWebhookCertificate.enabled": "false",
      "akri.values.agent.extensionService.mqttBroker.hostName": "[format('{0}.{1}', variables('MQTT_SETTINGS').brokerListenerServiceName, variables('AIO_EXTENSION_SCOPE').cluster.releaseNamespace)]",
      "akri.values.agent.extensionService.mqttBroker.port": "[variables('MQTT_SETTINGS').brokerListenerPort]",
      "akri.values.agent.extensionService.mqttBroker.serviceAccountAudience": "[variables('MQTT_SETTINGS').serviceAccountAudience]",
      "akri.values.agent.host.containerRuntimeSocket": "[parameters('containerRuntimeSocket')]",
      "akri.values.kubernetesDistro": "[toLower(parameters('kubernetesDistro'))]",
      "mqttBroker.values.global.quickstart": "false",
      "mqttBroker.values.operator.firstPartyMetricsOn": "true",
      "observability.metrics.enabled": "[format('{0}', variables('OBSERVABILITY_ENABLED'))]",
      "observability.metrics.openTelemetryCollectorAddress": "[if(variables('OBSERVABILITY_ENABLED'), format('{0}', tryGet(tryGet(parameters('advancedConfig'), 'observability'), 'otelCollectorAddress')), '')]",
      "observability.metrics.exportIntervalSeconds": "[format('{0}', coalesce(tryGet(tryGet(parameters('advancedConfig'), 'observability'), 'otelExportIntervalSeconds'), 60))]",
      "trustSource": "[parameters('trustConfig').source]",
      "trustBundleSettings.issuer.name": "[if(equals(parameters('trustConfig').source, 'CustomerManaged'), parameters('trustConfig').settings.issuerName, variables('MQTT_SETTINGS').selfSignedIssuerName)]",
      "trustBundleSettings.issuer.kind": "[coalesce(tryGet(tryGet(parameters('trustConfig'), 'settings'), 'issuerKind'), '')]",
      "trustBundleSettings.configMap.name": "[coalesce(tryGet(tryGet(parameters('trustConfig'), 'settings'), 'configMapName'), '')]",
      "trustBundleSettings.configMap.key": "[coalesce(tryGet(tryGet(parameters('trustConfig'), 'settings'), 'configMapKey'), '')]",
      "schemaRegistry.values.resourceId": "[parameters('schemaRegistryId')]",
      "schemaRegistry.values.mqttBroker.host": "[format('mqtts://{0}.{1}:{2}', variables('MQTT_SETTINGS').brokerListenerServiceName, variables('AIO_EXTENSION_SCOPE').cluster.releaseNamespace, variables('MQTT_SETTINGS').brokerListenerPort)]",
      "schemaRegistry.values.mqttBroker.tlsEnabled": true,
      "schemaRegistry.values.mqttBroker.serviceAccountTokenAudience": "[variables('MQTT_SETTINGS').serviceAccountAudience]"
    }
  },
  "resources": {
    "cluster": {
      "existing": true,
      "type": "Microsoft.Kubernetes/connectedClusters",
      "apiVersion": "2021-03-01",
      "name": "[parameters('clusterName')]"
    },
    "aio_platform_extension": {
      "type": "Microsoft.KubernetesConfiguration/extensions",
      "apiVersion": "2023-05-01",
      "scope": "[format('Microsoft.Kubernetes/connectedClusters/{0}', parameters('clusterName'))]",
      "name": "[format('azure-iot-operations-platform-{0}', variables('AIO_EXTENSION_SUFFIX'))]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "extensionType": "microsoft.iotoperations.platform",
        "version": "[coalesce(tryGet(tryGet(parameters('advancedConfig'), 'platform'), 'version'), variables('VERSIONS').platform)]",
        "releaseTrain": "[coalesce(tryGet(tryGet(parameters('advancedConfig'), 'platform'), 'train'), variables('TRAINS').platform)]",
        "autoUpgradeMinorVersion": false,
        "scope": {
          "cluster": {
            "releaseNamespace": "cert-manager"
          }
        },
        "configurationSettings": {
          "installCertManager": "[if(equals(parameters('trustConfig').source, 'SelfSigned'), 'true', 'false')]",
          "installTrustManager": "[if(equals(parameters('trustConfig').source, 'SelfSigned'), 'true', 'false')]"
        }
      },
      "dependsOn": [
        "cluster"
      ]
    },
    "secret_sync_controller_extension": {
      "type": "Microsoft.KubernetesConfiguration/extensions",
      "apiVersion": "2023-05-01",
      "scope": "[format('Microsoft.Kubernetes/connectedClusters/{0}', parameters('clusterName'))]",
      "name": "azure-secret-store",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "extensionType": "microsoft.azure.secretstore",
        "version": "[coalesce(tryGet(tryGet(parameters('advancedConfig'), 'secretSyncController'), 'version'), variables('VERSIONS').secretSyncController)]",
        "releaseTrain": "[coalesce(tryGet(tryGet(parameters('advancedConfig'), 'secretSyncController'), 'train'), variables('TRAINS').secretSyncController)]",
        "autoUpgradeMinorVersion": false,
        "configurationSettings": {
          "rotationPollIntervalInSeconds": "120",
          "validatingAdmissionPolicies.applyPolicies": "false"
        }
      },
      "dependsOn": [
        "aio_platform_extension",
        "cluster"
      ]
    },
    "open_service_mesh_extension": {
      "type": "Microsoft.KubernetesConfiguration/extensions",
      "apiVersion": "2023-05-01",
      "scope": "[format('Microsoft.Kubernetes/connectedClusters/{0}', parameters('clusterName'))]",
      "name": "[format('open-service-mesh-{0}', variables('AIO_EXTENSION_SUFFIX'))]",
      "properties": {
        "extensionType": "microsoft.openservicemesh",
        "autoUpgradeMinorVersion": false,
        "version": "[coalesce(tryGet(tryGet(parameters('advancedConfig'), 'openServiceMesh'), 'version'), variables('VERSIONS').openServiceMesh)]",
        "releaseTrain": "[coalesce(tryGet(tryGet(parameters('advancedConfig'), 'openServiceMesh'), 'train'), variables('TRAINS').openServiceMesh)]",
        "configurationSettings": {
          "osm.osm.enablePermissiveTrafficPolicy": "false",
          "osm.osm.featureFlags.enableWASMStats": "false",
          "osm.osm.configResyncInterval": "10s"
        }
      },
      "dependsOn": [
        "cluster"
      ]
    },
    "edge_storage_accelerator_extension": {
      "type": "Microsoft.KubernetesConfiguration/extensions",
      "apiVersion": "2023-05-01",
      "scope": "[format('Microsoft.Kubernetes/connectedClusters/{0}', parameters('clusterName'))]",
      "name": "azure-arc-containerstorage",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "extensionType": "Microsoft.Arc.ContainerStorage",
        "autoUpgradeMinorVersion": false,
        "version": "[coalesce(tryGet(tryGet(parameters('advancedConfig'), 'edgeStorageAccelerator'), 'version'), variables('VERSIONS').edgeStorageAccelerator)]",
        "releaseTrain": "[coalesce(tryGet(tryGet(parameters('advancedConfig'), 'edgeStorageAccelerator'), 'train'), variables('TRAINS').edgeStorageAccelerator)]",
        "configurationSettings": "[union(createObject('edgeStorageConfiguration.create', 'true', 'feature.diskStorageClass', variables('kubernetesStorageClass')), if(equals(tryGet(tryGet(parameters('advancedConfig'), 'edgeStorageAccelerator'), 'faultToleranceEnabled'), true()), createObject('acstorConfiguration.create', 'true', 'acstorConfiguration.properties.diskMountPoint', '/mnt'), createObject()))]"
      },
      "dependsOn": [
        "aio_platform_extension",
        "cluster",
        "open_service_mesh_extension"
      ]
    },
    "aio_extension": {
      "type": "Microsoft.KubernetesConfiguration/extensions",
      "apiVersion": "2023-05-01",
      "scope": "[format('Microsoft.Kubernetes/connectedClusters/{0}', parameters('clusterName'))]",
      "name": "[format('azure-iot-operations-{0}', variables('AIO_EXTENSION_SUFFIX'))]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "extensionType": "microsoft.iotoperations",
        "version": "[coalesce(tryGet(tryGet(parameters('advancedConfig'), 'aio'), 'version'), variables('VERSIONS').aio)]",
        "releaseTrain": "[coalesce(tryGet(tryGet(parameters('advancedConfig'), 'aio'), 'train'), variables('TRAINS').aio)]",
        "autoUpgradeMinorVersion": false,
        "scope": "[variables('AIO_EXTENSION_SCOPE')]",
        "configurationSettings": "[union(variables('defaultAioConfigurationSettings'), coalesce(tryGet(tryGet(parameters('advancedConfig'), 'aio'), 'configurationSettingsOverride'), createObject()))]"
      },
      "dependsOn": [
        "aio_platform_extension",
        "cluster"
      ]
    }
  },
  "outputs": {
    "clExtensionIds": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "value": [
        "[extensionResourceId(resourceId('Microsoft.Kubernetes/connectedClusters', parameters('clusterName')), 'Microsoft.KubernetesConfiguration/extensions', format('azure-iot-operations-platform-{0}', variables('AIO_EXTENSION_SUFFIX')))]",
        "[extensionResourceId(resourceId('Microsoft.Kubernetes/connectedClusters', parameters('clusterName')), 'Microsoft.KubernetesConfiguration/extensions', format('azure-iot-operations-{0}', variables('AIO_EXTENSION_SUFFIX')))]",
        "[extensionResourceId(resourceId('Microsoft.Kubernetes/connectedClusters', parameters('clusterName')), 'Microsoft.KubernetesConfiguration/extensions', 'azure-secret-store')]"
      ]
    },
    "extensions": {
      "type": "object",
      "value": {
        "aio": {
          "name": "[format('azure-iot-operations-{0}', variables('AIO_EXTENSION_SUFFIX'))]",
          "id": "[extensionResourceId(resourceId('Microsoft.Kubernetes/connectedClusters', parameters('clusterName')), 'Microsoft.KubernetesConfiguration/extensions', format('azure-iot-operations-{0}', variables('AIO_EXTENSION_SUFFIX')))]",
          "version": "[reference('aio_extension').version]",
          "releaseTrain": "[reference('aio_extension').releaseTrain]",
          "config": {
            "brokerListenerName": "[variables('MQTT_SETTINGS').brokerListenerServiceName]",
            "brokerListenerPort": "[variables('MQTT_SETTINGS').brokerListenerPort]"
          },
          "identityPrincipalId": "[reference('aio_extension', '2023-05-01', 'full').identity.principalId]"
        },
        "platform": {
          "name": "[format('azure-iot-operations-platform-{0}', variables('AIO_EXTENSION_SUFFIX'))]",
          "id": "[extensionResourceId(resourceId('Microsoft.Kubernetes/connectedClusters', parameters('clusterName')), 'Microsoft.KubernetesConfiguration/extensions', format('azure-iot-operations-platform-{0}', variables('AIO_EXTENSION_SUFFIX')))]",
          "version": "[reference('aio_platform_extension').version]",
          "releaseTrain": "[reference('aio_platform_extension').releaseTrain]"
        },
        "secretSyncController": {
          "name": "azure-secret-store",
          "id": "[extensionResourceId(resourceId('Microsoft.Kubernetes/connectedClusters', parameters('clusterName')), 'Microsoft.KubernetesConfiguration/extensions', 'azure-secret-store')]",
          "version": "[reference('secret_sync_controller_extension').version]",
          "releaseTrain": "[reference('secret_sync_controller_extension').releaseTrain]"
        },
        "openServiceMesh": {
          "name": "[format('open-service-mesh-{0}', variables('AIO_EXTENSION_SUFFIX'))]",
          "id": "[extensionResourceId(resourceId('Microsoft.Kubernetes/connectedClusters', parameters('clusterName')), 'Microsoft.KubernetesConfiguration/extensions', format('open-service-mesh-{0}', variables('AIO_EXTENSION_SUFFIX')))]",
          "version": "[reference('open_service_mesh_extension').version]",
          "releaseTrain": "[reference('open_service_mesh_extension').releaseTrain]"
        },
        "edgeStorageAccelerator": {
          "name": "azure-arc-containerstorage",
          "id": "[extensionResourceId(resourceId('Microsoft.Kubernetes/connectedClusters', parameters('clusterName')), 'Microsoft.KubernetesConfiguration/extensions', 'azure-arc-containerstorage')]",
          "version": "[reference('edge_storage_accelerator_extension').version]",
          "releaseTrain": "[reference('edge_storage_accelerator_extension').releaseTrain]"
        }
      }
    }
  }
}