{
  "__inputs": [
    {
      "name": "DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST",
      "label": "Managed_Prometheus_jajens-azmonworkspace-test",
      "description": "",
      "type": "datasource",
      "pluginId": "prometheus",
      "pluginName": "Prometheus"
    },
    {
      "name": "VAR_AIO_DP_SELF_TEST_PIPELINE",
      "type": "constant",
      "label": "aio_dp_self_test_pipeline",
      "value": ".*self-test-pipeline.*",
      "description": ""
    },
    {
      "name": "VAR_BF_LATENCY_THRESHOLD_MS",
      "type": "constant",
      "label": "bf_latency_threshold_ms",
      "value": "500",
      "description": ""
    },
    {
      "name": "VAR_AIO_OPC_LATENCY_THRESHOLD_MS",
      "type": "constant",
      "label": "aio_opc_latency_threshold_ms",
      "value": "5000",
      "description": ""
    },
    {
      "name": "VAR_NODETHRESHOLDRED",
      "type": "constant",
      "label": "nodeThresholdRed",
      "value": "90",
      "description": ""
    },
    {
      "name": "VAR_NODETHRESHOLDYELLOW",
      "type": "constant",
      "label": "nodeThresholdYellow",
      "value": "80",
      "description": ""
    },
    {
      "name": "VAR_OPC_SLO_SR_GOAL",
      "type": "constant",
      "label": "opc_slo_sr_goal",
      "value": "99.999",
      "description": ""
    },
    {
      "name": "VAR_OPC_SLO_PUBLISH_LATENCY_MS_GOAL",
      "type": "constant",
      "label": "opc_slo_publish_latency_ms_goal",
      "value": "5000",
      "description": ""
    },
    {
      "name": "VAR_OPC_SLO_CONNECT_LATENCY_MS_GOAL",
      "type": "constant",
      "label": "opc_slo_connect_latency_ms_goal",
      "value": "3000",
      "description": ""
    },
    {
      "name": "VAR_ORC_LATENCY_THRESHOLD_MS",
      "type": "constant",
      "label": "orc_latency_threshold_ms",
      "value": "60000",
      "description": ""
    },
    {
      "name": "VAR_AIO_DP_ERROR_THRESHOLD",
      "type": "constant",
      "label": "aio_dp_error_threshold",
      "value": "20",
      "description": ""
    },
    {
      "name": "VAR_AIO_DP_NATS_UTILIZATION_THRESHOLD",
      "type": "constant",
      "label": "aio_dp_nats_utilization_threshold",
      "value": "0.90",
      "description": ""
    },
    {
      "name": "VAR_AIO_DP_ERROR_RATE",
      "type": "constant",
      "label": "aio_dp_error_rate",
      "value": "0.05",
      "description": ""
    },
    {
      "name": "VAR_AIO_DP_LATENCY_THRESHOLD_MS",
      "type": "constant",
      "label": "aio_dp_latency_threshold_ms",
      "value": "5000",
      "description": ""
    }
  ],
  "__elements": {},
  "__requires": [
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "9.5.13"
    },
    {
      "type": "datasource",
      "id": "prometheus",
      "name": "Prometheus",
      "version": "1.0.0"
    },
    {
      "type": "panel",
      "id": "state-timeline",
      "name": "State timeline",
      "version": ""
    },
    {
      "type": "panel",
      "id": "text",
      "name": "Text",
      "version": ""
    }
  ],
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 1,
  "id": null,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
      },
      "description": "",
      "gridPos": {
        "h": 3,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 64,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<div style=\"background-color:#283747; text-align: center\">\n  <span style=\"color:#FFFFF8; font-size:30px\">Azure IoT Operations</span>\n</div>\n<div style=\"background-color:#566573; text-align: center\"> \n  <span style=\"color:white; font-size:28px\">Health Model</span>\n</div>",
        "mode": "markdown"
      },
      "pluginVersion": "9.5.13",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "refId": "A"
        }
      ],
      "transparent": true,
      "type": "text"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
      },
      "description": "",
      "gridPos": {
        "h": 2,
        "w": 8,
        "x": 0,
        "y": 3
      },
      "id": 2,
      "maxPerRow": 12,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<div style=\"background-color:#C1C9D1; text-align: center\"> \n  <span style=\"color:black; font-size:20px\"> ${cluster} </span>\n</div>\n\n",
        "mode": "markdown"
      },
      "pluginVersion": "9.5.13",
      "repeat": "cluster",
      "repeatDirection": "h",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "refId": "A"
        }
      ],
      "transparent": true,
      "type": "text"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "fillOpacity": 55,
            "lineWidth": 0,
            "spanNulls": false
          },
          "mappings": [],
          "max": 1,
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "blue",
                "value": null
              },
              {
                "color": "purple",
                "value": 0
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 8,
        "x": 0,
        "y": 5
      },
      "id": 39,
      "maxPerRow": 12,
      "options": {
        "alignValue": "left",
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "mergeValues": true,
        "rowHeight": 0.5,
        "showValue": "never",
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "9.5.12",
      "repeat": "cluster",
      "repeatDirection": "h",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "count by(chartversion) (count by(chartversion) (aio_orc_controller_reconcile_latency_count{cluster=~\"$cluster\"}))",
          "format": "time_series",
          "legendFormat": "__auto",
          "range": true,
          "refId": "A"
        }
      ],
      "title": "AIO Version",
      "transparent": true,
      "type": "state-timeline"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "fillOpacity": 82,
            "lineWidth": 0,
            "spanNulls": false
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "#505050",
                "value": null
              },
              {
                "color": "red",
                "value": 0
              },
              {
                "color": "yellow",
                "value": 0.5
              },
              {
                "color": "green",
                "value": 1
              },
              {
                "color": "#7f7f7f",
                "value": 404
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "MessageQueue SLO"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Click for details on ${__field.labels._}",
                    "url": "/d/e2e98c97-7655-44d1-b8f3-5008b7f6ffbb/aio-health-service-mq?${__all_variables}&${__url_time_range}"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "DataProcessor SLO"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Click for details on ${__field.labels._}",
                    "url": "/d/e7f4802e-d73b-4f06-a84c-715cdc42fb35/aio-health-service-dp?${__all_variables}&${__url_time_range}"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "OPCUA SLO"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Click for details on ${__field.labels._}",
                    "url": "/d/ba43ff7a-e741-4965-b430-c9d4bf1757a6/aio-health-service-opcua?${__all_variables}&${__url_time_range}"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Data Processor SLO"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Click for details on ${__field.labels._}",
                    "url": "/d/e7f4802e-d73b-4f06-a84c-715cdc42fb35/aio-health-service-dp?${__all_variables}&${__url_time_range}"
                  }
                ]
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 4,
        "w": 8,
        "x": 0,
        "y": 8
      },
      "id": 33,
      "maxPerRow": 12,
      "options": {
        "alignValue": "left",
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "mergeValues": true,
        "rowHeight": 0.72,
        "showValue": "never",
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "repeat": "cluster",
      "repeatDirection": "h",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "label_replace(min(\r\n    label_replace(label_replace(\r\n        (min(\r\n            1 * sgn(\r\n                # Raw Success Rate for MQTT message publishing by app, qos, and opc-ua connector\r\n                label_replace(min by(app,opc_ua_connector)(label_replace(label_replace(\r\n                rate(aio_opc_mqtt_message_publishing_duration_count{cluster=\"$cluster\",aio_opc_mqtt_publish_result=\"success\"}[5m:1m])\r\n                * 100 / rate(aio_opc_mqtt_message_publishing_duration_count{cluster=\"$cluster\"}[5m:1m])\r\n                ,\"app\",\"$1\",\"aio_opc_application\",\"(.*)\")\r\n                ,\"opc_ua_connector\",\"$1\",\"aio_opc_module_name\",\"(.*)\"))\r\n                ,\"_\",\"MQTT Publishing Success Rate\",\"\",\"\")\r\n            >= $opc_slo_sr_goal) or\r\n            0 * sgn(\r\n                # Raw Success Rate for MQTT message publishing by app, qos, and opc-ua connector\r\n                label_replace(min by(app,opc_ua_connector)(label_replace(label_replace(\r\n                rate(aio_opc_mqtt_message_publishing_duration_count{cluster=\"$cluster\",aio_opc_mqtt_publish_result=\"success\"}[5m:1m])\r\n                * 100 / rate(aio_opc_mqtt_message_publishing_duration_count{cluster=\"$cluster\"}[5m:1m])\r\n                ,\"app\",\"$1\",\"aio_opc_application\",\"(.*)\")\r\n                ,\"opc_ua_connector\",\"$1\",\"aio_opc_module_name\",\"(.*)\"))\r\n                ,\"_\",\"MQTT Publishing Success Rate\",\"\",\"\")\r\n            < $opc_slo_sr_goal) or\r\n            vector(0)>0\r\n        ) or vector(0))\r\n        ,\"url\",\"/d/_dMuZUh4kd/opc-ua-broker-dashboard\",\"\",\"\")\r\n        ,\"_\",\"MQTT Publishing Success Rate\",\"\",\"\") or\r\n    label_replace(label_replace(\r\n        (min(\r\n            1 * sgn(\r\n                label_replace(min by(app,opc_ua_connector)(label_replace(label_replace(\r\n                rate(aio_opc_session_connect_duration_count{cluster=\"$cluster\",aio_opc_module_type=\"opcua-connector\",aio_opc_connect_result=\"succeeded\"}[5m:1m])\r\n                * 100 / rate(aio_opc_session_connect_duration_count{cluster=\"$cluster\",aio_opc_module_type=\"opcua-connector\"}[5m:1m])\r\n                ,\"app\",\"$1\",\"aio_opc_application\",\"(.*)\")\r\n                ,\"opc_ua_connector\",\"$1\",\"aio_opc_module_name\",\"(.*)\"))\r\n                ,\"_\",\"OPC-UA Connect Success Rate\",\"\",\"\")\r\n            >= $opc_slo_sr_goal) or\r\n            0 * sgn(\r\n                label_replace(min by(app,opc_ua_connector)(label_replace(label_replace(\r\n                rate(aio_opc_session_connect_duration_count{cluster=\"$cluster\",aio_opc_module_type=\"opcua-connector\",aio_opc_connect_result=\"succeeded\"}[5m:1m])\r\n                * 100 / rate(aio_opc_session_connect_duration_count{cluster=\"$cluster\",aio_opc_module_type=\"opcua-connector\"}[5m:1m])\r\n                ,\"app\",\"$1\",\"aio_opc_application\",\"(.*)\")\r\n                ,\"opc_ua_connector\",\"$1\",\"aio_opc_module_name\",\"(.*)\"))\r\n                ,\"_\",\"OPC-UA Connect Success Rate\",\"\",\"\")\r\n            < $opc_slo_sr_goal) or\r\n            vector(0)>0\r\n        ) or vector(404))\r\n        ,\"url\",\"/d/_dMuZUh4kd/opc-ua-broker-dashboard\",\"\",\"\")\r\n        ,\"_\",\"OPC UA Connect Success Rate\",\"\",\"\") or\r\n\r\n    label_replace(label_replace(\r\n        (min(\r\n            1 * sgn(\r\n                # Raw Latency for MQTT Publishing\r\n                label_replace(\r\n                histogram_quantile(0.95,sum by(le,app,opc_ua_connector)(label_replace(label_replace(\r\n                    rate(aio_opc_mqtt_message_publishing_duration_bucket{cluster=\"$cluster\",aio_opc_module_type=\"opcua-connector\",aio_opc_mqtt_publish_result=\"success\"}[5m:1m])\r\n                ,\"app\",\"$1\",\"aio_opc_application\",\"(.*)\")\r\n                ,\"opc_ua_connector\",\"$1\",\"aio_opc_module_name\",\"(.*)\")))\r\n                ,\"_\",\"MQTT Publishing P95 Latency\",\"\",\"\") \r\n            <= $opc_slo_publish_latency_ms_goal) or\r\n            0.5 * sgn(\r\n                # Raw Latency for MQTT Publishing\r\n                label_replace(\r\n                histogram_quantile(0.95,sum by(le,app,opc_ua_connector)(label_replace(label_replace(\r\n                    rate(aio_opc_mqtt_message_publishing_duration_bucket{cluster=\"$cluster\",aio_opc_module_type=\"opcua-connector\",aio_opc_mqtt_publish_result=\"success\"}[5m:1m])\r\n                ,\"app\",\"$1\",\"aio_opc_application\",\"(.*)\")\r\n                ,\"opc_ua_connector\",\"$1\",\"aio_opc_module_name\",\"(.*)\")))\r\n                ,\"_\",\"MQTT Publishing P95 Latency\",\"\",\"\") \r\n            > $opc_slo_publish_latency_ms_goal) or\r\n            vector(0)>0\r\n        ) or vector(404))\r\n        ,\"url\",\"/d/_dMuZUh4kd/opc-ua-broker-dashboard\",\"\",\"\")\r\n        ,\"_\",\"MQTT Publishing latency\",\"\",\"\") or \r\n\r\n    label_replace(label_replace(\r\n        (min(\r\n            1 * sgn(\r\n                #Raw latency for OPC UA Connect by app and opc-ua connector\r\n                label_replace(\r\n                histogram_quantile(0.95,sum by(le,app,opc_ua_connector)(label_replace(label_replace(\r\n                    rate(aio_opc_session_connect_duration_bucket{cluster=\"$cluster\",aio_opc_module_type=\"opcua-connector\",aio_opc_connect_result=\"succeeded\"}[5m:1m])\r\n                ,\"app\",\"$1\",\"aio_opc_application\",\"(.*)\")\r\n                ,\"opc_ua_connector\",\"$1\",\"aio_opc_module_name\",\"(.*)\")))\r\n                ,\"_\",\"OPC-UA Connect P95 Latency\",\"\",\"\")\r\n            <= $opc_slo_connect_latency_ms_goal) or\r\n            0 * sgn(\r\n                #Raw latency for OPC UA Connect by app and opc-ua connector\r\n                label_replace(\r\n                histogram_quantile(0.95,sum by(le,app,opc_ua_connector)(label_replace(label_replace(\r\n                    rate(aio_opc_session_connect_duration_bucket{cluster=\"$cluster\",aio_opc_module_type=\"opcua-connector\",aio_opc_connect_result=\"succeeded\"}[5m:1m])\r\n                ,\"app\",\"$1\",\"aio_opc_application\",\"(.*)\")\r\n                ,\"opc_ua_connector\",\"$1\",\"aio_opc_module_name\",\"(.*)\")))\r\n                ,\"_\",\"OPC-UA Connect P95 Latency\",\"\",\"\")\r\n            > $opc_slo_connect_latency_ms_goal) or\r\n            vector(0)>0\r\n        ) or vector(404))\r\n        ,\"url\",\"/d/_dMuZUh4kd/opc-ua-broker-dashboard\",\"\",\"\")\r\n        ,\"_\",\"OPC-UA Connect latency\",\"\",\"\") or \r\n    #######################################################################################################################################\r\n    # OLD E4I SLO HEALTH:\r\n    label_replace(label_replace(\r\n        (min(\r\n            1 * sgn(\r\n                # Raw Success Rate for MQTT message publishing by app, qos, and opc-ua connector\r\n                label_replace(min by(app,opc_ua_connector)(label_replace(label_replace(\r\n                rate(e4i_mqtt_message_publishing_duration_count{cluster=\"$cluster\",e4i_module_type=\"opc-ua-connector\",e4i_mqtt_publish_result=\"success\"}[5m:1m])\r\n                * 100 / rate(e4i_mqtt_message_publishing_duration_count{cluster=\"$cluster\",e4i_module_type=\"opc-ua-connector\"}[5m:1m])\r\n                ,\"app\",\"$1\",\"e4i_application\",\"(.*)\")\r\n                ,\"opc_ua_connector\",\"$1\",\"e4i_module_name\",\"(.*)\"))\r\n                ,\"_\",\"MQTT Publishing Success Rate\",\"\",\"\")\r\n            >= $opc_slo_sr_goal) or\r\n            0 * sgn(\r\n                # Raw Success Rate for MQTT message publishing by app, qos, and opc-ua connector\r\n                label_replace(min by(app,opc_ua_connector)(label_replace(label_replace(\r\n                rate(e4i_mqtt_message_publishing_duration_count{cluster=\"$cluster\",e4i_module_type=\"opc-ua-connector\",e4i_mqtt_publish_result=\"success\"}[5m:1m])\r\n                * 100 / rate(e4i_mqtt_message_publishing_duration_count{cluster=\"$cluster\",e4i_module_type=\"opc-ua-connector\"}[5m:1m])\r\n                ,\"app\",\"$1\",\"e4i_application\",\"(.*)\")\r\n                ,\"opc_ua_connector\",\"$1\",\"e4i_module_name\",\"(.*)\"))\r\n                ,\"_\",\"MQTT Publishing Success Rate\",\"\",\"\")\r\n            < $opc_slo_sr_goal) or\r\n            vector(0)>0\r\n        ) or vector(0))\r\n        ,\"url\",\"/d/_dMuZUh4kd/opc-ua-broker-dashboard\",\"\",\"\")\r\n        ,\"_\",\"MQTT Publishing Success Rate\",\"\",\"\") or\r\n    label_replace(label_replace(\r\n        (min(\r\n            1 * sgn(\r\n                label_replace(min by(app,opc_ua_connector)(label_replace(label_replace(\r\n                rate(e4i_opc_session_connect_duration_count{cluster=\"$cluster\",e4i_module_type=\"opc-ua-connector\",e4i_opc_connect_result=\"succeeded\"}[5m:1m])\r\n                * 100 / rate(e4i_opc_session_connect_duration_count{cluster=\"$cluster\",e4i_module_type=\"opc-ua-connector\"}[5m:1m])\r\n                ,\"app\",\"$1\",\"e4i_application\",\"(.*)\")\r\n                ,\"opc_ua_connector\",\"$1\",\"e4i_module_name\",\"(.*)\"))\r\n                ,\"_\",\"OPC-UA Connect Success Rate\",\"\",\"\")\r\n            >= $opc_slo_sr_goal) or\r\n            0 * sgn(\r\n                label_replace(min by(app,opc_ua_connector)(label_replace(label_replace(\r\n                rate(e4i_opc_session_connect_duration_count{cluster=\"$cluster\",e4i_module_type=\"opc-ua-connector\",e4i_opc_connect_result=\"succeeded\"}[5m:1m])\r\n                * 100 / rate(e4i_opc_session_connect_duration_count{cluster=\"$cluster\",e4i_module_type=\"opc-ua-connector\"}[5m:1m])\r\n                ,\"app\",\"$1\",\"e4i_application\",\"(.*)\")\r\n                ,\"opc_ua_connector\",\"$1\",\"e4i_module_name\",\"(.*)\"))\r\n                ,\"_\",\"OPC-UA Connect Success Rate\",\"\",\"\")\r\n            < $opc_slo_sr_goal) or\r\n            vector(0)>0\r\n        ) or vector(404))\r\n        ,\"url\",\"/d/_dMuZUh4kd/opc-ua-broker-dashboard\",\"\",\"\")\r\n        ,\"_\",\"OPC UA Connect Success Rate\",\"\",\"\") or\r\n\r\n    label_replace(label_replace(\r\n        (min(\r\n            1 * sgn(\r\n                # Raw Latency for MQTT Publishing\r\n                label_replace(\r\n                histogram_quantile(0.95,sum by(le,app,opc_ua_connector)(label_replace(label_replace(\r\n                    rate(e4i_mqtt_message_publishing_duration_bucket{cluster=\"$cluster\",e4i_module_type=\"opc-ua-connector\",e4i_mqtt_publish_result=\"success\"}[5m:1m])\r\n                ,\"app\",\"$1\",\"e4i_application\",\"(.*)\")\r\n                ,\"opc_ua_connector\",\"$1\",\"e4i_module_name\",\"(.*)\")))\r\n                ,\"_\",\"MQTT Publishing P95 Latency\",\"\",\"\") \r\n            <= $opc_slo_publish_latency_ms_goal) or\r\n            0 * sgn(\r\n                # Raw Latency for MQTT Publishing\r\n                label_replace(\r\n                histogram_quantile(0.95,sum by(le,app,opc_ua_connector)(label_replace(label_replace(\r\n                    rate(e4i_mqtt_message_publishing_duration_bucket{cluster=\"$cluster\",e4i_module_type=\"opc-ua-connector\",e4i_mqtt_publish_result=\"success\"}[5m:1m])\r\n                ,\"app\",\"$1\",\"e4i_application\",\"(.*)\")\r\n                ,\"opc_ua_connector\",\"$1\",\"e4i_module_name\",\"(.*)\")))\r\n                ,\"_\",\"MQTT Publishing P95 Latency\",\"\",\"\") \r\n            > $opc_slo_publish_latency_ms_goal) or\r\n            vector(0)>0\r\n        ) or vector(404))\r\n        ,\"url\",\"/d/_dMuZUh4kd/opc-ua-broker-dashboard\",\"\",\"\")\r\n        ,\"_\",\"MQTT Publishing latency\",\"\",\"\") or \r\n\r\n    label_replace(label_replace(\r\n        (min(\r\n            1 * sgn(\r\n                #Raw latency for OPC UA Connect by app and opc-ua connector\r\n                label_replace(\r\n                histogram_quantile(0.95,sum by(le,app,opc_ua_connector)(label_replace(label_replace(\r\n                    rate(e4i_opc_session_connect_duration_bucket{cluster=\"$cluster\",e4i_module_type=\"opc-ua-connector\",e4i_opc_connect_result=\"succeeded\"}[5m:1m])\r\n                ,\"app\",\"$1\",\"e4i_application\",\"(.*)\")\r\n                ,\"opc_ua_connector\",\"$1\",\"e4i_module_name\",\"(.*)\")))\r\n                ,\"_\",\"OPC-UA Connect P95 Latency\",\"\",\"\")\r\n            <= $opc_slo_connect_latency_ms_goal) or\r\n            0 * sgn(\r\n                #Raw latency for OPC UA Connect by app and opc-ua connector\r\n                label_replace(\r\n                histogram_quantile(0.95,sum by(le,app,opc_ua_connector)(label_replace(label_replace(\r\n                    rate(e4i_opc_session_connect_duration_bucket{cluster=\"$cluster\",e4i_module_type=\"opc-ua-connector\",e4i_opc_connect_result=\"succeeded\"}[5m:1m])\r\n                ,\"app\",\"$1\",\"e4i_application\",\"(.*)\")\r\n                ,\"opc_ua_connector\",\"$1\",\"e4i_module_name\",\"(.*)\")))\r\n                ,\"_\",\"OPC-UA Connect P95 Latency\",\"\",\"\")\r\n            > $opc_slo_connect_latency_ms_goal) or\r\n            vector(0)>0\r\n        ) or vector(404))\r\n        ,\"url\",\"/d/_dMuZUh4kd/opc-ua-broker-dashboard\",\"\",\"\")\r\n        ,\"_\",\"OPC-UA Connect latency\",\"\",\"\") or \r\n    vector(0)>0\r\n),\"_\",\"OPCUA SLO\",\"\",\"\")",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "OPC"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "label_replace(min(\r\n    label_replace(label_replace(\r\n        (1 - min(\r\n            1 * sgn(\r\n                sum(\r\n                    rate(aio_mq_authentication_failures{cluster=~\"$cluster\", instance=~\"$namespace\", category!=\"broker_selftest\"}[2m])\r\n                    )\r\n            <= 20) or\r\n            0 * sgn(\r\n                sum(\r\n                    rate(aio_mq_authentication_failures{cluster=~\"$cluster\", instance=~\"$namespace\", category!=\"broker_selftest\"}[2m])\r\n                    )\r\n            > 20)) or vector(404))\r\n        ,\"url\",\"/d/f5a5c523-2cb6-42d8-b23f-06b0227fe40b/e4k-connect\",\"\",\"\")\r\n        ,\"_\",\"Authentication failures\",\"\",\"\") or\r\n    label_replace(label_replace(\r\n        (1 - min(\r\n            1 * sgn(\r\n                sum(\r\n                    rate(aio_mq_authorization_deny{cluster=~\"$cluster\", instance=~\"$namespace\", category!=\"broker_selftest\"}[2m])\r\n                    )\r\n            <= 20) or\r\n            0 * sgn(\r\n                sum(\r\n                    rate(aio_mq_authorization_deny{cluster=~\"$cluster\", instance=~\"$namespace\", category!=\"broker_selftest\"}[2m])\r\n                    )\r\n            > 20)) or vector(404))\r\n        ,\"url\",\"/d/f5a5c523-2cb6-42d8-b23f-06b0227fe40b/e4k-connect\",\"\",\"\")\r\n        ,\"_\",\"Authorization failures\",\"\",\"\") or        \r\n    label_replace(label_replace(\r\n        (1 - min(\r\n            1 * sgn(\r\n                sum(rate(aio_mq_backpressure_packets_rejected{pod_type=\"BE\", cluster=~\"$cluster\", instance=~\"$namespace\", category!=\"broker_selftest\"}[2m])) / \r\n                sum(quantile_over_time(.95, rate(aio_mq_publishes_received{pod_type=\"FE\", cluster=~\"$cluster\", instance=~\"$namespace\"}[2m])[30m:]))\r\n            <= 0.05) or\r\n            0 * sgn(\r\n                sum(rate(aio_mq_backpressure_packets_rejected{pod_type=\"BE\", cluster=~\"$cluster\", instance=~\"$namespace\", category!=\"broker_selftest\"}[2m])) / \r\n                sum(quantile_over_time(.95, rate(aio_mq_publishes_received{pod_type=\"FE\", cluster=~\"$cluster\", instance=~\"$namespace\"}[2m])[30m:]))\r\n            <= 0.05)) or vector(404))\r\n        ,\"url\",\"/d/E19etH24z/e4k-cluster-perf\",\"\",\"\")\r\n        ,\"_\",\"Backpressure\",\"\",\"\") or\r\n    # OLD E4K SLOs:\r\n    label_replace(label_replace(\r\n        (1 - min(\r\n            1 * sgn(\r\n                sum(\r\n                    rate(e4k_authentication_failures{cluster=~\"$cluster\", instance=~\"$namespace\", category!=\"broker_selftest\"}[2m])\r\n                    )\r\n            <= 20) or\r\n            0 * sgn(\r\n                sum(\r\n                    rate(e4k_authentication_failures{cluster=~\"$cluster\", instance=~\"$namespace\", category!=\"broker_selftest\"}[2m])\r\n                    )\r\n            > 20)) or vector(404))\r\n        ,\"url\",\"/d/f5a5c523-2cb6-42d8-b23f-06b0227fe40b/e4k-connect\",\"\",\"\")\r\n        ,\"_\",\"Authentication failures\",\"\",\"\") or\r\n    label_replace(label_replace(\r\n        (1 - min(\r\n            1 * sgn(\r\n                sum(\r\n                    rate(e4k_authorization_deny{cluster=~\"$cluster\", instance=~\"$namespace\", category!=\"broker_selftest\"}[2m])\r\n                    )\r\n            <= 20) or\r\n            0 * sgn(\r\n                sum(\r\n                    rate(e4k_authorization_deny{cluster=~\"$cluster\", instance=~\"$namespace\", category!=\"broker_selftest\"}[2m])\r\n                    )\r\n            > 20)) or vector(404))\r\n        ,\"url\",\"/d/f5a5c523-2cb6-42d8-b23f-06b0227fe40b/e4k-connect\",\"\",\"\")\r\n        ,\"_\",\"Authorization failures\",\"\",\"\") or        \r\n    label_replace(label_replace(\r\n        (1 - min(\r\n            1 * sgn(\r\n                sum(rate(e4k_backpressure_packets_rejected{pod_type=\"BE\", cluster=~\"$cluster\", instance=~\"$namespace\", category!=\"broker_selftest\"}[2m])) / \r\n                sum(quantile_over_time(.95, rate(e4k_publishes_received{pod_type=\"FE\", cluster=~\"$cluster\", instance=~\"$namespace\"}[2m])[30m:]))\r\n            <= 0.05) or\r\n            0 * sgn(\r\n                sum(rate(e4k_backpressure_packets_rejected{pod_type=\"BE\", cluster=~\"$cluster\", instance=~\"$namespace\", category!=\"broker_selftest\"}[2m])) / \r\n                sum(quantile_over_time(.95, rate(e4k_publishes_received{pod_type=\"FE\", cluster=~\"$cluster\", instance=~\"$namespace\"}[2m])[30m:]))\r\n            <= 0.05)) or vector(404))\r\n        ,\"url\",\"/d/E19etH24z/e4k-cluster-perf\",\"\",\"\")\r\n        ,\"_\",\"Backpressure\",\"\",\"\") or\r\n    vector(0) > 0 # Tail; not shown\r\n),\"_\",\"MessageQueue SLO\",\"\",\"\")",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "MQ"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "label_replace(min(\r\n    label_replace(\r\n        (\r\n            1 - min(\r\n                sgn(sum(rate(aio_dp_stage_errors{cluster=~\"$cluster\"}[$__rate_interval])) <= $aio_dp_error_threshold)\r\n                or\r\n                sgn(sum(rate(aio_dp_reader_errors{cluster=~\"$cluster\"}[$__rate_interval])) <= $aio_dp_error_threshold)\r\n            )\r\n            or vector(1)\r\n        )\r\n        ,\"_\",\"Errors\",\"\",\"\") \r\n    or\r\n    label_replace(\r\n        (\r\n            sgn(\r\n                (\r\n                    sum(rate(aio_dp_reader_errors{cluster=\"$cluster\"}[$__rate_interval])) + \r\n                    sum(rate(aio_dp_stage_errors{cluster=\"$cluster\"}[$__rate_interval]))\r\n                ) / \r\n                (\r\n                    sum(rate(aio_dp_reader_incoming_messages{cluster=\"$cluster\"}[$__rate_interval])) + \r\n                    sum(rate(aio_dp_stage_incoming_messages{cluster=\"$cluster\"}[$__rate_interval]))\r\n                ) < $aio_dp_error_rate\r\n            )\r\n            or vector(1)\r\n        )\r\n        ,\"_\",\"Success Rate\",\"\",\"\")\r\n    or\r\n    label_replace(\r\n        (min(\r\n            sgn(\r\n                max(\r\n                    histogram_quantile(0.95, rate(aio_dp_pipeline_latency_bucket{cluster=~\"$cluster\"}[$__rate_interval]))\r\n                    ) < $aio_dp_latency_threshold_ms\r\n                )\r\n            or\r\n            1 - sgn(\r\n                    max(\r\n                        histogram_quantile(0.95, rate(aio_dp_pipeline_latency_bucket{cluster=~\"$cluster\"}[$__rate_interval]))\r\n                    ) >= $aio_dp_latency_threshold_ms\r\n                )\r\n        ) \r\n        or vector(404))\r\n        ,\"_\",\"Pipeline Latency\",\"\",\"\")\r\n    or        \r\n    label_replace(\r\n        (\r\n            min(\r\n                sgn(\r\n                    sum(rate(aio_dp_reader_processed_heartbeats{cluster=~\"$cluster\"}[$__rate_interval]))\r\n                    >= sum(rate(aio_dp_reader_incoming_heartbeats{cluster=~\"$cluster\"}[$__rate_interval]))\r\n                )\r\n                or\r\n                sgn(\r\n                    sum(rate(aio_dp_stage_heartbeats{cluster=~\"$cluster\"}[$__rate_interval]))\r\n                    >= sum(rate(aio_dp_reader_processed_heartbeats{cluster=~\"$cluster\"}[$__rate_interval]))\r\n                )\r\n            )\r\n            or vector(404))\r\n    ,\"_\",\"Heartbeats\",\"\",\"\")\r\n    or\r\n    label_replace(\r\n        (\r\n            sgn(\r\n                sum by(server_id)(nats_varz_jetstream_stats_storage{cluster=~\"$cluster\"}) > 0\r\n                and\r\n                (sum by(server_id)(nats_varz_jetstream_stats_storage{cluster=~\"$cluster\"}) / \r\n                sum by(server_id)(nats_varz_jetstream_config_max_storage{cluster=~\"$cluster\"}))\r\n                <= $aio_dp_nats_utilization_threshold\r\n            )\r\n        or vector(404))\r\n    ,\"_\",\"Message Store\",\"\",\"\")\r\n),\"_\",\"DataProcessor SLO\",\"\",\"\")",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "DP"
        }
      ],
      "title": "Scenario Health",
      "transformations": [],
      "transparent": true,
      "type": "state-timeline"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "fillOpacity": 82,
            "lineWidth": 0,
            "spanNulls": false
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "#505050",
                "value": null
              },
              {
                "color": "red",
                "value": 0
              },
              {
                "color": "yellow",
                "value": 0.5
              },
              {
                "color": "green",
                "value": 1
              },
              {
                "color": "#7f7f7f",
                "value": 404
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "MessageQueue Health"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Click for details on ${__field.labels._}",
                    "url": "/d/e2e98c97-7655-44d1-b8f3-5008b7f6ffbb/aio-health-service-mq?${__all_variables}&${__url_time_range}"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "DataProcessor Health"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Click for details on ${__field.labels._}",
                    "url": "/d/e7f4802e-d73b-4f06-a84c-715cdc42fb35/aio-health-service-dp?${__all_variables}&${__url_time_range}"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "OPCUA Health"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Click for details on ${__field.labels._}",
                    "url": "/d/ba43ff7a-e741-4965-b430-c9d4bf1757a6/aio-health-service-opcua?${__all_variables}&${__url_time_range}"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Orchestration Health"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Click for details on ${__field.labels._}",
                    "url": "/d/f42af83d-1bfe-4bdd-966b-ff1886fee8c6/aio-health-service-orch?${__all_variables}&${__url_time_range}"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Akri Health"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Click for details on ${__field.labels._}",
                    "url": "/d/df11b4b1-2dcb-4e6b-af47-4c9fc5793f56/aio-health-service-akri?${__all_variables}&${__url_time_range}"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "DataProcessor Health"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Click for details on ${__field.labels._}",
                    "url": "/d/e7f4802e-d73b-4f06-a84c-715cdc42fb35/aio-health-service-dp?${__all_variables}&${__url_time_range}"
                  }
                ]
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 5,
        "w": 8,
        "x": 0,
        "y": 12
      },
      "id": 1,
      "maxPerRow": 12,
      "options": {
        "alignValue": "left",
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "mergeValues": true,
        "rowHeight": 0.72,
        "showValue": "never",
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "repeat": "cluster",
      "repeatDirection": "h",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "label_replace(min(\r\navg(label_join( # Workload ready percents (for deployment, daemonset, and statefulset)\r\n    label_replace(label_join(\r\n       kube_deployment_status_replicas_ready{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"^aio-akri-agent.*\"} or\r\n       kube_daemonset_status_number_ready{cluster=~\"$cluster\",namespace=~\".*\",daemonset=~\"^aio-akri-agent.*\"} or\r\n       kube_statefulset_status_replicas_ready{cluster=~\"$cluster\",namespace=~\".*\",statefulset=~\"^aio-akri-agent.*\"}\r\n       ,\"workloadName\", \"\", \"deployment\", \"daemonset\", \"statefulset\")\r\n       ,\"workloadType\", \"$1\", \"__name__\", \"kube_(.*)_status_.*\")\r\n /\r\n  label_replace(label_join(\r\n        kube_daemonset_status_desired_number_scheduled{cluster=~\"$cluster\",namespace=~\".*\",daemonset=~\"^aio-akri-agent.*\"} or\r\n        kube_deployment_spec_replicas{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"^aio-akri-agent.*\"} or\r\n        kube_statefulset_status_replicas{cluster=~\"$cluster\",namespace=~\".*\",statefulset=~\"^aio-akri-agent.*\"}\r\n        ,\"workloadName\", \"\", \"deployment\", \"daemonset\", \"statefulset\")\r\n        ,\"workloadType\", \"$1\", \"__name__\", \"kube_(.*)_(status|spec)_.*\")\r\n  ,\"workload\", \":\", \"workloadType\", \"workloadName\")\r\n) by (workload) >=0 \r\n) or vector(-1),\"_\",\"Akri Health\",\"\",\"\")",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "AKRI"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "label_replace(min(\r\n    label_replace(label_replace(\r\n        (min(\r\n            label_replace(aio_mq_ping_correctness{cluster=~\"$cluster\"},\"depHealth\",\"ping\",\"\",\"\") or\r\n            label_replace(aio_mq_publish_route_replication_correctness{cluster=~\"$cluster\"},\"depHealth\",\"publish\",\"\",\"\") or\r\n            label_replace(aio_mq_subscribe_route_replication_correctness{cluster=~\"$cluster\"},\"depHealth\",\"subscribe\",\"\",\"\") or\r\n            vector(0)>0\r\n        ) or vector(404))\r\n        ,\"url\",\"/d/e2e98c97-7655-44d1-b8f3-5008b7f6ffbb/aio-health-service-mq\",\"\",\"\")\r\n        ,\"_\",\"Self-test input (MQ)\",\"\",\"\") or\r\n    label_replace(\r\n        (min(\r\n            0 * sgn(0 < round(sum(increase(aio_dp_stage_errors{cluster=~\"$cluster\",cloud_resource_id=~\"$aio_dp_self_test_pipeline\"}[$__rate_interval])))) or\r\n            1 * sgn(aio_dp_stage_incoming_messages{cluster=~\"$cluster\", stage_type=~\"output/.*\", cloud_resource_id=~\"$aio_dp_self_test_pipeline\"}) or\r\n            vector(0)>0\r\n        ) or vector(404))\r\n        ,\"_\",\"Self-test stage errors\",\"\",\"\") or\r\n    label_replace(\r\n        (min(sgn(rate(\r\n            aio_dp_stage_incoming_messages{cluster=~\"$cluster\", stage_type=~\"output/.*\", cloud_resource_id=~\"$aio_dp_self_test_pipeline\"}[$__rate_interval]\r\n            )*60)) or vector(-1))\r\n        ,\"_\",\"Self-test output\",\"\",\"\") or\r\n    label_replace(\r\n        (min(\r\n            1 * sgn(max(histogram_quantile(0.95, rate(\r\n                aio_dp_pipeline_latency_bucket{cluster=~\"$cluster\",cloud_resource_id=~\"$aio_dp_self_test_pipeline\"}[5m]\r\n                ))) < $aio_dp_latency_threshold_ms) or\r\n            0 * sgn(max(histogram_quantile(0.95, rate(\r\n                aio_dp_pipeline_latency_bucket{cluster=~\"$cluster\",cloud_resource_id=~\"$aio_dp_self_test_pipeline\"}[5m]\r\n                ))) >= $aio_dp_latency_threshold_ms) or\r\n            vector(0)>0\r\n        ) or vector(404))\r\n        ,\"_\",\"Self-test pipeline latency\",\"\",\"\") or \r\n    label_replace(label_replace(\r\n        (min(\r\n            0 * sgn(max(\r\n                100 * sum by(server_id)(nats_varz_jetstream_stats_storage{cluster=~\"$cluster\"})\r\n                / sum by(server_id)(nats_varz_jetstream_config_max_storage{cluster=~\"$cluster\"})\r\n                ) > 90) or\r\n            1 * sgn(max(\r\n                100 * sum by(server_id)(nats_varz_jetstream_stats_storage{cluster=~\"$cluster\"})\r\n                / sum by(server_id)(nats_varz_jetstream_config_max_storage{cluster=~\"$cluster\"})\r\n                ) <= 90) or\r\n            vector(0)>0\r\n        ) or vector(404))\r\n        ,\"url\",\"/d/e17d0b7f-9771-4cb8-adf9-56cbaef3fff6/aio-service-dp-messagestore\",\"\",\"\")\r\n        ,\"_\",\"Store Utilization\",\"\",\"\") or \r\n    vector(0)>0\r\n),\"_\",\"DataProcessor Health\",\"\",\"\")",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "DP"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "label_replace(min(\r\n    label_replace(label_replace((\r\n        min(aio_mq_ping_correctness{cluster=~\"$cluster\"}) or vector(404))\r\n        ,\"url\",\"/d/f46e5384-d78d-480a-911c-0328cb20b224/e4k-ping\",\"\",\"\")\r\n        ,\"_\",\"Ping health\",\"\",\"\") or\r\n    label_replace(label_replace((\r\n        min(aio_mq_publish_route_replication_correctness{cluster=~\"$cluster\"}) or vector(404))\r\n        ,\"url\",\"/d/THdxxxh4z/e4k-publish\",\"\",\"\")\r\n        ,\"_\",\"Publish health\",\"\",\"\") or \r\n    label_replace(label_replace((\r\n        min(aio_mq_subscribe_route_replication_correctness{cluster=~\"$cluster\"}) or vector(404))\r\n        ,\"url\",\"/d/d0318b5a-4afa-47e3-975f-6b1d2d783849/e4k-subscribe\",\"\",\"\")\r\n        ,\"_\",\"Subscribe health\",\"\",\"\") or \r\n    # OLD E4K METRICS:\r\n    label_replace(label_replace((\r\n        min(ping_correctness{cluster=~\"$cluster\", instance=~\"$namespace\"}) or \r\n        min(e4k_ping_correctness{cluster=~\"$cluster\", instance=~\"$namespace\"}) or vector(404))\r\n        ,\"url\",\"/d/f46e5384-d78d-480a-911c-0328cb20b224/e4k-ping\",\"\",\"\")\r\n        ,\"_\",\"Ping health\",\"\",\"\") or\r\n    label_replace(label_replace((\r\n        min(publish_route_replication_correctness{cluster=~\"$cluster\", instance=~\"$namespace\"}) or \r\n        min(e4k_publish_route_replication_correctness{cluster=~\"$cluster\", instance=~\"$namespace\"}) or vector(404))\r\n        ,\"url\",\"/d/THdxxxh4z/e4k-publish\",\"\",\"\")\r\n        ,\"_\",\"Publish health\",\"\",\"\") or \r\n    label_replace(label_replace((\r\n        min(subscribe_route_replication_correctness{cluster=~\"$cluster\", instance=~\"$namespace\"}) or \r\n        min(e4k_subscribe_route_replication_correctness{cluster=~\"$cluster\", instance=~\"$namespace\"}) or vector(404))\r\n        ,\"url\",\"/d/d0318b5a-4afa-47e3-975f-6b1d2d783849/e4k-subscribe\",\"\",\"\")\r\n        ,\"_\",\"Subscribe health\",\"\",\"\") or \r\n    vector(0) > 0 # Tail; not shown\r\n),\"_\",\"MessageQueue Health\",\"\",\"\")",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "MQ"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "label_replace(min(\r\n    label_replace(\r\n        (min(\r\n            1 * sgn(\r\n                100*sum(rate(aio_opc_mqtt_message_publishing_duration_count\r\n                    {cluster=\"$cluster\",service_name=\"supervisor\",aio_opc_mqtt_publish_result=\"Success\"}[$__rate_interval]))\r\n                / sum(rate(aio_opc_mqtt_message_publishing_duration_count\r\n                    {cluster=\"$cluster\",service_name=\"supervisor\"}[$__rate_interval]))\r\n                 > 99) or\r\n            0 * sgn(sum(rate(aio_opc_mqtt_message_publishing_duration_count{cluster=\"$cluster\",service_name=\"supervisor\"}[$__rate_interval])) > 0) or\r\n            vector(0)>0\r\n        ) or vector(-1))\r\n        #,\"url\",\"/d/f46e5384-d78d-480a-911c-0328cb20b224/e4k-ping\",\"\",\"\")\r\n        ,\"_\",\"Supervisor Success Rate\",\"\",\"\") or\r\n    label_replace(\r\n        (min(\r\n            1 * sgn(max(histogram_quantile(0.95, rate(\r\n                aio_opc_mqtt_message_publishing_duration_bucket{cluster=\"$cluster\",service_name=~\"supervisor\"}[5m]\r\n                ))) < $aio_opc_latency_threshold_ms) or\r\n            0 * sgn(max(histogram_quantile(0.95, rate(\r\n                aio_opc_mqtt_message_publishing_duration_bucket{cluster=\"$cluster\",service_name=~\"supervisor\"}[5m]\r\n                ))) >= $aio_opc_latency_threshold_ms) or\r\n            vector(0)>0\r\n        ) or vector(404))\r\n        #,\"url\",\"/d/f5a5c523-2cb6-42d8-b23f-06b0227fe40b/e4k-connect\",\"\",\"\")\r\n        ,\"_\",\"Supervisor latency\",\"\",\"\") or \r\n    # OLD METRIC NAMES BELOW - TO BE REMOVED:\r\n    label_replace(\r\n        (min(\r\n            1 * sgn(\r\n                100*sum(rate(e4i_mqtt_message_publishing_duration_count\r\n                    {cluster=\"$cluster\",service_name=\"supervisor\",e4i_mqtt_publish_result=\"Success\"}[$__rate_interval]))\r\n                / sum(rate(e4i_mqtt_message_publishing_duration_count\r\n                    {cluster=\"$cluster\",service_name=\"supervisor\"}[$__rate_interval]))\r\n                 > 99) or\r\n            0 * sgn(sum(rate(e4i_mqtt_message_publishing_duration_count{cluster=\"$cluster\",service_name=\"supervisor\"}[$__rate_interval])) > 0) or\r\n            vector(0)>0\r\n        ) or vector(-1))\r\n        #,\"url\",\"/d/f46e5384-d78d-480a-911c-0328cb20b224/e4k-ping\",\"\",\"\")\r\n        ,\"_\",\"Supervisor Success Rate\",\"\",\"\") or\r\n    label_replace(\r\n        (min(\r\n            1 * sgn(max(histogram_quantile(0.95, rate(\r\n                e4i_mqtt_message_publishing_duration_bucket{cluster=\"$cluster\",service_name=~\"supervisor\"}[5m]\r\n                ))) < $aio_opc_latency_threshold_ms) or\r\n            0 * sgn(max(histogram_quantile(0.95, rate(\r\n                e4i_mqtt_message_publishing_duration_bucket{cluster=\"$cluster\",service_name=~\"supervisor\"}[5m]\r\n                ))) >= $aio_opc_latency_threshold_ms) or\r\n            vector(0)>0\r\n        ) or vector(404))\r\n        #,\"url\",\"/d/f5a5c523-2cb6-42d8-b23f-06b0227fe40b/e4k-connect\",\"\",\"\")\r\n        ,\"_\",\"Supervisor latency\",\"\",\"\") or \r\n    vector(0)>0\r\n),\"_\",\"OPCUA Health\",\"\",\"\")",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "OPCUA"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "label_replace(min(\r\n    label_replace(#label_replace(\r\n        (min(\r\n            1 * sgn(max(histogram_quantile(0.95, rate(\r\n                aio_orc_api_operation_latency_bucket{cluster=~\"$cluster\"}[5m]\r\n                ))) < $orc_latency_threshold_ms) or\r\n            0 * sgn(max(histogram_quantile(0.95, rate(\r\n                aio_orc_api_operation_latency_bucket{cluster=~\"$cluster\"}[5m]\r\n                ))) >= $orc_latency_threshold_ms) or\r\n            vector(0)>0\r\n        ) or vector(404))\r\n        ,\"_\",\"Self-test API Operation latency\",\"\",\"\") or\r\n    label_replace(#label_replace(\r\n        (min(\r\n            0 * sgn(0 < round(sum(increase(aio_orc_api_operation_errors{cluster=~\"$cluster\"}[$__rate_interval])))) or\r\n            1 * sgn(aio_orc_api_operation_latency_count{cluster=~\"$cluster\"}) or\r\n            vector(0)>0\r\n        ) or vector(404))\r\n        ,\"_\",\"Self-test API Operation errors\",\"\",\"\") or\r\n    label_replace(#label_replace(\r\n        (min(\r\n            1 * sgn(max(histogram_quantile(0.95, rate(\r\n                aio_orc_api_operation_latency_bucket{cluster=~\"$cluster\"}[5m]\r\n                ))) < $orc_latency_threshold_ms) or\r\n            0 * sgn(max(histogram_quantile(0.95, rate(\r\n                aio_orc_api_operation_latency_bucket{cluster=~\"$cluster\"}[5m]\r\n                ))) >= $orc_latency_threshold_ms) or\r\n            vector(0)>0\r\n        ) or vector(404))\r\n        ,\"_\",\"Self-test Provider Operation latency\",\"\",\"\") or\r\n    label_replace(#label_replace(\r\n        (min(\r\n            0 * sgn(0 < round(sum(increase(aio_orc_provider_operation_errors{cluster=~\"$cluster\"}[$__rate_interval])))) or\r\n            1 * sgn(aio_orc_provider_operation_latency_count{cluster=~\"$cluster\"}) or\r\n            vector(0)>0\r\n        ) or vector(404))\r\n        ,\"_\",\"Self-test Provider Operation errors\",\"\",\"\") or\r\n    # OLD SYMPHONY METRICS - TO BE REMOVED\r\n    label_replace(#label_replace(\r\n        (min(\r\n            1 * sgn(max(histogram_quantile(0.95, rate(\r\n                symphony_api_operation_latency_bucket{cluster=~\"$cluster\"}[5m]\r\n                ))) < $orc_latency_threshold_ms) or\r\n            0 * sgn(max(histogram_quantile(0.95, rate(\r\n                symphony_api_operation_latency_bucket{cluster=~\"$cluster\"}[5m]\r\n                ))) >= $orc_latency_threshold_ms) or\r\n            vector(0)>0\r\n        ) or vector(404))\r\n        ,\"_\",\"Self-test API Operation latency\",\"\",\"\") or\r\n    label_replace(#label_replace(\r\n        (min(\r\n            0 * sgn(0 < round(sum(increase(symphony_api_operation_errors{cluster=~\"$cluster\"}[$__rate_interval])))) or\r\n            1 * sgn(symphony_api_operation_latency_count{cluster=~\"$cluster\"}) or\r\n            vector(0)>0\r\n        ) or vector(404))\r\n        ,\"_\",\"Self-test API Operation errors\",\"\",\"\") or\r\n    label_replace(#label_replace(\r\n        (min(\r\n            1 * sgn(max(histogram_quantile(0.95, rate(\r\n                symphony_api_operation_latency_bucket{cluster=~\"$cluster\"}[5m]\r\n                ))) < $orc_latency_threshold_ms) or\r\n            0 * sgn(max(histogram_quantile(0.95, rate(\r\n                symphony_api_operation_latency_bucket{cluster=~\"$cluster\"}[5m]\r\n                ))) >= $orc_latency_threshold_ms) or\r\n            vector(0)>0\r\n        ) or vector(404))\r\n        ,\"_\",\"Self-test Provider Operation latency\",\"\",\"\") or\r\n    label_replace(#label_replace(\r\n        (min(\r\n            0 * sgn(0 < round(sum(increase(symphony_provider_operation_errors{cluster=~\"$cluster\"}[$__rate_interval])))) or\r\n            1 * sgn(symphony_provider_operation_latency_count{cluster=~\"$cluster\"}) or\r\n            vector(0)>0\r\n        ) or vector(404))\r\n        ,\"_\",\"Self-test Provider Operation errors\",\"\",\"\") or\r\n    vector(0)>0\r\n),\"_\",\"Orchestration Health\",\"\",\"\")",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "ORC"
        }
      ],
      "title": "Service Health",
      "transformations": [],
      "transparent": true,
      "type": "state-timeline"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "fillOpacity": 70,
            "lineWidth": 0,
            "spanNulls": false
          },
          "links": [
            {
              "targetBlank": true,
              "title": "Click for more details (health-infra-workload)",
              "url": "/d/E5cCeHj4z/health-infra-workload?${__all_variables}&${__url_time_range}"
            }
          ],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "red",
                "value": null
              },
              {
                "color": "yellow",
                "value": 0.5
              },
              {
                "color": "green",
                "value": 1
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 8,
        "x": 0,
        "y": 17
      },
      "id": 9,
      "links": [
        {
          "targetBlank": true,
          "title": "Click for more details (health-infra-workload)",
          "url": "/d/E5cCeHj4z/health-infra-workload?${__all_variables}&${__url_time_range}"
        },
        {
          "targetBlank": true,
          "title": "Open K8s / Compute Resources / Namespace (Workloads)",
          "url": "/d/a87fb0d919ec0ea5f6543124e16c6738/kubernetes-compute-resources-namespace-workloads?${cluster:queryparam}&${__url_time_range}"
        }
      ],
      "maxPerRow": 12,
      "options": {
        "alignValue": "left",
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "mergeValues": false,
        "rowHeight": 0.9,
        "showValue": "never",
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "repeat": "cluster",
      "repeatDirection": "h",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "## Workload Readiness health\r\n############################\r\nlabel_replace(min(\r\navg(label_join( # Workload ready percents (for deployment, daemonset, and statefulset)\r\n    label_replace(label_join(\r\n        kube_deployment_status_replicas_ready{cluster=~\"$cluster\",namespace=~\"$namespace\"} or\r\n        kube_daemonset_status_number_ready{cluster=~\"$cluster\",namespace=~\"$namespacem\"} or\r\n        kube_statefulset_status_replicas_ready{cluster=~\"$cluster\",namespace=~\"$namespace\"}\r\n        ,\"workloadName\", \"\", \"deployment\", \"daemonset\", \"statefulset\")\r\n        ,\"workloadType\", \"$1\", \"__name__\", \"kube_(.*)_status_.*\")\r\n  / label_replace(label_join(\r\n        kube_daemonset_status_desired_number_scheduled{cluster=~\"$cluster\",namespace=~\"$namespace\"} or\r\n        kube_deployment_spec_replicas{cluster=~\"$cluster\",namespace=~\"$namespace\"} or\r\n        kube_statefulset_status_replicas{cluster=~\"$cluster\",namespace=~\"$namespace\"}\r\n        ,\"workloadName\", \"\", \"deployment\", \"daemonset\", \"statefulset\")\r\n        ,\"workloadType\", \"$1\", \"__name__\", \"kube_(.*)_(status|spec)_.*\")\r\n  ,\"workload\", \":\", \"workloadType\", \"workloadName\")\r\n) by (workload) >=0 \r\n) or vector(0),\"_\",\"AIO Workload Readiness\",\"\",\"\")",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "## Container Restart Health:\r\n############################\r\nlabel_replace(\r\n  sgn(sum_over_time(sum(rate(\r\n    kube_pod_container_status_restarts_total{cluster=~\"$cluster\",namespace=~\"$namespace\"}[10m:1m]\r\n    )*60)[1h:]) > 5) * 0.0 # RED: Cumulative restarts over X(5) time greater than Y(1h)\r\n  or (max(rate(\r\n    kube_pod_container_status_restarts_total{cluster=~\"$cluster\",namespace=~\"$namespace\"}[5m:1m]\r\n    )*60*5) > 0) * 0.5 # YELLOW: restarts detected but below Red threshold\r\n  or sgn(max(\r\n    kube_pod_container_status_restarts_total{cluster=~\"$cluster\",namespace=~\"$namespace\"}\r\n    + 1 >= 0))\r\n  #or vector(1) # Healthy\r\n  ,\"_\",\"AIO Container Restarts\",\"\",\"\")\r\n## uncomment below to t-shoot this health metric\r\n# or label_replace(sum_over_time(sum(rate(kube_pod_container_status_restarts_total{cluster=~\"$cluster\"}[10m:1m])*60)[1h:]),\"_\",\"Total-restarts-over-time\",\"\",\"\")\r\n# or label_replace((max(rate(kube_pod_container_status_restarts_total{cluster=~\"$cluster\"}[5m:1m])*60*5) without (__name__,uid,instance,job) > 0),\"_\",\"restart\",\"\",\"\") # Base query for counting restarts\r\n",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "B"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "## Container CPU top-level health\r\n################################\r\nlabel_replace(\r\nmin(sgn( # Check for throttling > N indicating container is exceeding its CPU limits\r\n      rate(container_cpu_cfs_throttled_periods_total{cluster=~\"$cluster\",namespace=~\"$namespace\",container!=\"\"}[10m]) \r\n    / rate(container_cpu_cfs_periods_total{cluster=~\"$cluster\",namespace=~\"$namespace\",container!=\"\"}[10m])\r\n    >= 0.60) # If throttle create is greater than this percentage, we'll multiply sgn by 0.5 to show as error (or warning depending on threshold coloring)\r\n    ) # by (namespace,container) # These are commented out for top-level\r\n    * 0.0\r\nor\r\nmin(sgn( # Check for throttling > N indicating container is exceeding its CPU limits\r\n      rate(container_cpu_cfs_throttled_periods_total{cluster=~\"$cluster\",namespace=~\"$namespace\",container!=\"\"}[10m]) \r\n    / rate(container_cpu_cfs_periods_total{cluster=~\"$cluster\",namespace=~\"$namespace\",container!=\"\"}[10m])\r\n    >= 0.40) # If throttle create is greater than this percentage, we'll multiply sgn by 0.5 to show as error (or warning depending on threshold coloring)\r\n    ) # by (namespace,container) # These are commented out for top-level\r\n    * 0.5\r\nor\r\nmin( # Check to see if container is missing CPU Limits configuration\r\n    sgn(min(kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\"$namespace\",container!=\"\",resource=\"cpu\"}) by (namespace,container))\r\n    or # if resource limit missing, we or to below to show namespace/container using CPU without limit as a zero to indicate red\r\n    sgn(min(container_cpu_usage_seconds_total{cluster=~\"$cluster\",namespace=~\"$namespace\",container!=\"\"}) by (namespace,container))\r\n    # * 0 # TEMPORARILY DISABLING RED FOR MISSING LIMITS\r\n    ) #by (namespace,container) # These are commented out for top-level\r\n,\"_\",\"AIO Container CPU\",\"\",\"\")",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "C"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "## Container Memory Health:\r\n###########################\r\nlabel_replace(\r\nmin( # Look for high memory utilization\r\n    0.0 * sgn((\r\n        max(container_memory_working_set_bytes{cluster=~\"$cluster\",namespace=~\"$namespace\",container!=\"\"}) by (namespace,container)\r\n      / min(kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\"$namespace\",container!=\"\",resource=\"memory\"}) by (namespace, container)\r\n    ) >= .95) or # show health state of 0 if container memory utilization >= 95%\r\n    0.5 * sgn((\r\n        max(container_memory_working_set_bytes{cluster=~\"$cluster\",namespace=~\"$namespace\",container!=\"\"}) by (namespace,container)\r\n      / min(kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\"$namespace\",container!=\"\",resource=\"memory\"}) by (namespace, container)\r\n    ) >= .80) or # show health state of 0.5 if container memory utilization >= 80%\r\n    vector(0)>0\r\n) #by (container) \r\nor\r\nmin( # Look for missing limits which we will show as 0 if missing\r\n    sgn(min(kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\"$namespace\",container!=\"\",resource=\"memory\"}) by (namespace,container))\r\n    or # if resource limit missing, we or to below to show namespace/container using CPU without limit as a zero to indicate red\r\n    sgn(min(container_memory_working_set_bytes{cluster=~\"$cluster\",namespace=~\"$namespace\",container!=\"\"}) by (namespace,container))\r\n    # * 0 # TEMPORARILY DISABLING RED FOR MISSING LIMITS\r\n) #by (container) \r\n,\"_\",\"AIO Container Memory\",\"\",\"\")",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "D"
        }
      ],
      "title": "Kubernetes Workload Health",
      "transformations": [],
      "transparent": true,
      "type": "state-timeline"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "fillOpacity": 70,
            "lineWidth": 0,
            "spanNulls": false
          },
          "links": [
            {
              "targetBlank": true,
              "title": "Click for more details",
              "url": "/d/E5cCeHj4z/health-infra-workload?${__all_variables}&${__url_time_range}"
            }
          ],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-blue",
                "value": null
              },
              {
                "color": "semi-dark-blue",
                "value": 0.1
              },
              {
                "color": "blue",
                "value": 0.2
              },
              {
                "color": "light-blue",
                "value": 0.3
              },
              {
                "color": "super-light-blue",
                "value": 0.4
              },
              {
                "color": "super-light-blue",
                "value": 0.5
              },
              {
                "color": "super-light-purple",
                "value": 0.6
              },
              {
                "color": "light-purple",
                "value": 0.7
              },
              {
                "color": "purple",
                "value": 0.8
              },
              {
                "color": "semi-dark-purple",
                "value": 0.9
              },
              {
                "color": "dark-purple",
                "value": 0.95
              }
            ]
          },
          "unit": "percentunit"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 8,
        "x": 0,
        "y": 21
      },
      "id": 16,
      "maxPerRow": 12,
      "options": {
        "alignValue": "left",
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "mergeValues": false,
        "rowHeight": 0.8,
        "showValue": "never",
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "repeat": "cluster",
      "repeatDirection": "h",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "label_replace(    max(rate(container_cpu_usage_seconds_total{cluster=~\"$cluster\",namespace=~\"$namespace\",container=\"\",cpu=\"total\"}[5m:1m])) /\r\n    max_over_time(max(rate(container_cpu_usage_seconds_total{cluster=~\"$cluster\",namespace=~\"$namespace\",container=\"\",cpu=\"total\"}[5m:1m]))[$__range:])\r\n    ,\"_\",\"CPU Relative Heatmap\",\"\",\"\")\r\nor  label_replace(max(container_memory_working_set_bytes{cluster=~\"$cluster\",namespace=~\"$namespace\",container=\"\"}) /\r\n    max_over_time(max(container_memory_working_set_bytes{cluster=~\"$cluster\",namespace=~\"$namespace\",container=\"\"})[$__range:])\r\n    ,\"_\",\"Memory Relative Heatmap\",\"\",\"\")",
          "legendFormat": "__auto",
          "range": true,
          "refId": "A"
        }
      ],
      "title": "Kubernetes Workload Usage ",
      "transformations": [],
      "transparent": true,
      "type": "state-timeline"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "fillOpacity": 70,
            "lineWidth": 0,
            "spanNulls": false
          },
          "links": [
            {
              "targetBlank": true,
              "title": "Click for more details (health-infra-cluster)",
              "url": "/d/e159191f-81f2-4443-af47-fe7cd4da23f8/health-infra-cluster?${__all_variables}&${__url_time_range}"
            }
          ],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "#808080",
                "value": null
              },
              {
                "color": "red",
                "value": 0
              },
              {
                "color": "yellow",
                "value": 0.5
              },
              {
                "color": "green",
                "value": 1
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 8,
        "x": 0,
        "y": 24
      },
      "id": 14,
      "links": [
        {
          "targetBlank": true,
          "title": "Click for more details (health-infra-cluster)",
          "url": "/d/e159191f-81f2-4443-af47-fe7cd4da23f8/health-infra-cluster?${__all_variables}&${__url_time_range}"
        },
        {
          "targetBlank": true,
          "title": "Open K8s / Compute Resources / Cluster",
          "url": "/d/efa86fd1d0c121a26444b636a3f56738/kubernetes-compute-resources-cluster?${cluster:queryparam}&${__url_time_range}"
        }
      ],
      "maxPerRow": 12,
      "options": {
        "alignValue": "left",
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "mergeValues": false,
        "rowHeight": 0.9,
        "showValue": "never",
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "repeat": "cluster",
      "repeatDirection": "h",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "# Node Health Status\r\n####################\r\n# RED (0) if no nodes ready without pressure\r\n# YELLOW (0.5) if at least one node not ready or with pressure\r\n# Green (1.0) otherwise\r\nlabel_replace(\r\n  sum(\r\n    max by (node) (kube_node_status_condition{cluster=~\"$cluster\",condition=\"ready\",status=\"false\"} > 0) * 0 or\r\n    max by (node) (kube_node_status_condition{cluster=~\"$cluster\",condition!=\"ready\",status=\"true\"} > 0) * 0.5 or\r\n    max by (node) (kube_node_status_condition{cluster=~\"$cluster\",condition=\"ready\",status=\"true\"} > 0) * 1\r\n  ) / sum(kube_node_info{cluster=~\"$cluster\"})\r\n  ,\"_\",\"Node Readiness\",\"\",\"\")\r\n#or label_replace(sum(kube_node_info),\"_\",\"Node Total Count\",\"\",\"\")\r\n#or label_replace(sum(kube_node_status_condition{condition=\"Ready\",status=\"true\"}),\"_\",\"Node Ready Count\",\"\",\"\")\r\n#or label_replace( sum(max by (node) (kube_node_status_condition{condition!=\"Ready\",status=\"true\"})),\"_\", \"Node Pressure Count\",\"\",\"\")\r\n#or label_replace(max by (node) (kube_node_status_condition{condition=\"Ready\",status=\"false\"}),\"_\",\"Node Ready Count\",\"\",\"\")\r\n#or label_replace(max by (node) (kube_node_status_condition{condition!=\"Ready\",status=\"true\"}),\"_\", \"Node Pressure Count\",\"\",\"\")\r\n#or label_replace(sum(sgn(\r\n#   max by (node) (kube_node_status_condition{condition=\"Ready\",status=\"false\"})\r\n# + max by (node) (kube_node_status_condition{condition!=\"Ready\",status=\"true\"})\r\n#  )),\"_\",\"Unhealthy Node Count\",\"\",\"\")",
          "legendFormat": "__auto",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "#############################\r\n# Node CPU Health\r\nlabel_replace(min(\r\n# BEGIN inner query\r\nmin by(_)(label_replace(vector(0)>0\r\n    or 0.0 * sgn(\r\n        100 - ((avg by (instance) (rate(node_cpu_seconds_total{cluster=~\"$cluster\",mode=\"idle\"}[5m])) \r\n              + avg by (instance) (rate(node_cpu_seconds_total{cluster=~\"$cluster\",mode=\"iowait\"}[5m]))\r\n        ) * 100) > $nodeThresholdRed)\r\n    or 0.5 * sgn(\r\n        100 - ((avg by (instance) (rate(node_cpu_seconds_total{cluster=~\"$cluster\",mode=\"idle\"}[5m])) \r\n              + avg by (instance) (rate(node_cpu_seconds_total{cluster=~\"$cluster\",mode=\"iowait\"}[5m]))\r\n        ) * 100) > $nodeThresholdYellow)\r\n    or 1.0 * sgn(sum by (instance)(node_cpu_seconds_total{cluster=~\"$cluster\"} > 0))\r\n    or -1 * sgn(max by (instance) (label_replace(kube_node_info{cluster=~\"$cluster\"},\"instance\",\"$1\",\"node\",\"(.*)\")))\r\n    ,\"_\",\"$1\",\"instance\",\"(.*)\"))\r\n# END inner query\r\n),\"_\",\"Node CPU\", \"\",\"\")",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "B"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "#############################\r\n# Node Memory Health\r\nlabel_replace(min(\r\n# BEGIN inner query\r\nmin by(_)(label_replace(vector(0)>0\r\n    or 0.0 * sgn(\r\n        (100 * sum by (instance)(node_memory_MemTotal_bytes{cluster=~\"$cluster\"} - (node_memory_MemFree_bytes{cluster=~\"$cluster\"} + node_memory_Buffers_bytes{cluster=~\"$cluster\"} + node_memory_Cached_bytes{cluster=~\"$cluster\"})) / sum by(instance) (node_memory_MemTotal_bytes{cluster=~\"$cluster\"})) > $nodeThresholdRed)\r\n    or 0.5 * sgn(\r\n        (100 * sum by (instance)(node_memory_MemTotal_bytes{cluster=~\"$cluster\"} - (node_memory_MemFree_bytes{cluster=~\"$cluster\"} + node_memory_Buffers_bytes{cluster=~\"$cluster\"} + node_memory_Cached_bytes{cluster=~\"$cluster\"})) / sum by(instance) (node_memory_MemTotal_bytes{cluster=~\"$cluster\"})) > $nodeThresholdYellow)\r\n    or 1.0 * sgn(sum by (instance)(node_memory_MemTotal_bytes{cluster=~\"$cluster\"} > 0))\r\n    or -1 * sgn(max by (instance) (label_replace(kube_node_info{cluster=~\"$cluster\"},\"instance\",\"$1\",\"node\",\"(.*)\")))\r\n,\"_\",\"$1\",\"instance\",\"(.*)\"))\r\n# END inner query\r\n),\"_\",\"Node Memory\", \"\",\"\")",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "C"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "#############################\r\n# Disk Usage Health\r\nlabel_replace(min(\r\n# BEGIN inner query\r\nmin by(node)(label_replace(vector(0)>0\r\n  or 0.0 * sgn(max by(instance) (100 - (100 * node_filesystem_avail_bytes{cluster=~\"$cluster\"} \r\n            / node_filesystem_size_bytes{cluster=~\"$cluster\"}) > 10) > $nodeThresholdRed)\r\n  or 0.5 * sgn(max by(instance) (100 - (100 * node_filesystem_avail_bytes{cluster=~\"$cluster\"} \r\n            / node_filesystem_size_bytes{cluster=~\"$cluster\"}) > 10) > $nodeThresholdYellow)\r\n  or 1.0 * sgn(max by(instance) (100 - (100 * node_filesystem_avail_bytes{cluster=~\"$cluster\"} \r\n            / node_filesystem_size_bytes{cluster=~\"$cluster\"})))\r\n,\"node\",\"$1\",\"instance\",\"(.*)\"))\r\nor max by (node) (kube_node_info{cluster=\"$cluster\"}) * -1 # Baseline by node\r\n# END inner query\r\n),\"_\",\"Node Disk\", \"\",\"\")",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "D"
        }
      ],
      "title": "Kubernetes Node Health",
      "transformations": [],
      "transparent": true,
      "type": "state-timeline"
    }
  ],
  "refresh": "",
  "revision": 1,
  "schemaVersion": 38,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "Managed_Prometheus_jajens-azmonworkspace-test",
          "value": "Managed_Prometheus_jajens-azmonworkspace-test"
        },
        "hide": 2,
        "includeAll": false,
        "multi": false,
        "name": "prometheus",
        "options": [],
        "query": "prometheus",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "type": "datasource"
      },
      {
        "current": {},
        "datasource": {
          "type": "prometheus",
          "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
        },
        "definition": "kube_node_status_condition",
        "description": "AIO cluster(s) to view",
        "hide": 0,
        "includeAll": true,
        "label": "Cluster",
        "multi": true,
        "name": "cluster",
        "options": [],
        "query": {
          "query": "kube_node_status_condition",
          "refId": "PrometheusVariableQueryEditor-VariableQuery"
        },
        "refresh": 2,
        "regex": "/.*cluster=\"([^\"]*).*/",
        "skipUrlSync": false,
        "sort": 1,
        "type": "query"
      },
      {
        "current": {},
        "datasource": {
          "type": "prometheus",
          "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
        },
        "definition": "kube_namespace_status_phase{cluster=~\"$cluster\", phase!~\"terminating\"}",
        "hide": 2,
        "includeAll": true,
        "multi": true,
        "name": "namespace",
        "options": [],
        "query": {
          "query": "kube_namespace_status_phase{cluster=~\"$cluster\", phase!~\"terminating\"}",
          "refId": "PrometheusVariableQueryEditor-VariableQuery"
        },
        "refresh": 2,
        "regex": "/.*namespace=\"([^\"]*).*/",
        "skipUrlSync": false,
        "sort": 1,
        "type": "query"
      },
      {
        "hide": 2,
        "name": "aio_dp_self_test_pipeline",
        "query": "${VAR_AIO_DP_SELF_TEST_PIPELINE}",
        "skipUrlSync": false,
        "type": "constant",
        "current": {
          "value": "${VAR_AIO_DP_SELF_TEST_PIPELINE}",
          "text": "${VAR_AIO_DP_SELF_TEST_PIPELINE}",
          "selected": false
        },
        "options": [
          {
            "value": "${VAR_AIO_DP_SELF_TEST_PIPELINE}",
            "text": "${VAR_AIO_DP_SELF_TEST_PIPELINE}",
            "selected": false
          }
        ]
      },
      {
        "hide": 2,
        "name": "bf_latency_threshold_ms",
        "query": "${VAR_BF_LATENCY_THRESHOLD_MS}",
        "skipUrlSync": false,
        "type": "constant",
        "current": {
          "value": "${VAR_BF_LATENCY_THRESHOLD_MS}",
          "text": "${VAR_BF_LATENCY_THRESHOLD_MS}",
          "selected": false
        },
        "options": [
          {
            "value": "${VAR_BF_LATENCY_THRESHOLD_MS}",
            "text": "${VAR_BF_LATENCY_THRESHOLD_MS}",
            "selected": false
          }
        ]
      },
      {
        "hide": 2,
        "name": "aio_opc_latency_threshold_ms",
        "query": "${VAR_AIO_OPC_LATENCY_THRESHOLD_MS}",
        "skipUrlSync": false,
        "type": "constant",
        "current": {
          "value": "${VAR_AIO_OPC_LATENCY_THRESHOLD_MS}",
          "text": "${VAR_AIO_OPC_LATENCY_THRESHOLD_MS}",
          "selected": false
        },
        "options": [
          {
            "value": "${VAR_AIO_OPC_LATENCY_THRESHOLD_MS}",
            "text": "${VAR_AIO_OPC_LATENCY_THRESHOLD_MS}",
            "selected": false
          }
        ]
      },
      {
        "description": "Threshold in percent (1-100) for determining red/error health state for node-level resources",
        "hide": 2,
        "name": "nodeThresholdRed",
        "query": "${VAR_NODETHRESHOLDRED}",
        "skipUrlSync": false,
        "type": "constant",
        "current": {
          "value": "${VAR_NODETHRESHOLDRED}",
          "text": "${VAR_NODETHRESHOLDRED}",
          "selected": false
        },
        "options": [
          {
            "value": "${VAR_NODETHRESHOLDRED}",
            "text": "${VAR_NODETHRESHOLDRED}",
            "selected": false
          }
        ]
      },
      {
        "description": "Threshold in percent (1-100) for determining yellow/warning health state for node-level resources",
        "hide": 2,
        "name": "nodeThresholdYellow",
        "query": "${VAR_NODETHRESHOLDYELLOW}",
        "skipUrlSync": false,
        "type": "constant",
        "current": {
          "value": "${VAR_NODETHRESHOLDYELLOW}",
          "text": "${VAR_NODETHRESHOLDYELLOW}",
          "selected": false
        },
        "options": [
          {
            "value": "${VAR_NODETHRESHOLDYELLOW}",
            "text": "${VAR_NODETHRESHOLDYELLOW}",
            "selected": false
          }
        ]
      },
      {
        "description": "Success Rate goal for SLOs; below this value is considered missed SLO",
        "hide": 2,
        "name": "opc_slo_sr_goal",
        "query": "${VAR_OPC_SLO_SR_GOAL}",
        "skipUrlSync": false,
        "type": "constant",
        "current": {
          "value": "${VAR_OPC_SLO_SR_GOAL}",
          "text": "${VAR_OPC_SLO_SR_GOAL}",
          "selected": false
        },
        "options": [
          {
            "value": "${VAR_OPC_SLO_SR_GOAL}",
            "text": "${VAR_OPC_SLO_SR_GOAL}",
            "selected": false
          }
        ]
      },
      {
        "description": "Latency goal for SLOs (in milliseconds); above this value is considered missed SLO",
        "hide": 2,
        "name": "opc_slo_publish_latency_ms_goal",
        "query": "${VAR_OPC_SLO_PUBLISH_LATENCY_MS_GOAL}",
        "skipUrlSync": false,
        "type": "constant",
        "current": {
          "value": "${VAR_OPC_SLO_PUBLISH_LATENCY_MS_GOAL}",
          "text": "${VAR_OPC_SLO_PUBLISH_LATENCY_MS_GOAL}",
          "selected": false
        },
        "options": [
          {
            "value": "${VAR_OPC_SLO_PUBLISH_LATENCY_MS_GOAL}",
            "text": "${VAR_OPC_SLO_PUBLISH_LATENCY_MS_GOAL}",
            "selected": false
          }
        ]
      },
      {
        "description": "Latency goal for SLOs (in milliseconds); above this value is considered missed SLO",
        "hide": 2,
        "name": "opc_slo_connect_latency_ms_goal",
        "query": "${VAR_OPC_SLO_CONNECT_LATENCY_MS_GOAL}",
        "skipUrlSync": false,
        "type": "constant",
        "current": {
          "value": "${VAR_OPC_SLO_CONNECT_LATENCY_MS_GOAL}",
          "text": "${VAR_OPC_SLO_CONNECT_LATENCY_MS_GOAL}",
          "selected": false
        },
        "options": [
          {
            "value": "${VAR_OPC_SLO_CONNECT_LATENCY_MS_GOAL}",
            "text": "${VAR_OPC_SLO_CONNECT_LATENCY_MS_GOAL}",
            "selected": false
          }
        ]
      },
      {
        "description": "Latency threshold for health signal",
        "hide": 2,
        "name": "orc_latency_threshold_ms",
        "query": "${VAR_ORC_LATENCY_THRESHOLD_MS}",
        "skipUrlSync": false,
        "type": "constant",
        "current": {
          "value": "${VAR_ORC_LATENCY_THRESHOLD_MS}",
          "text": "${VAR_ORC_LATENCY_THRESHOLD_MS}",
          "selected": false
        },
        "options": [
          {
            "value": "${VAR_ORC_LATENCY_THRESHOLD_MS}",
            "text": "${VAR_ORC_LATENCY_THRESHOLD_MS}",
            "selected": false
          }
        ]
      },
      {
        "hide": 2,
        "name": "aio_dp_error_threshold",
        "query": "${VAR_AIO_DP_ERROR_THRESHOLD}",
        "skipUrlSync": false,
        "type": "constant",
        "current": {
          "value": "${VAR_AIO_DP_ERROR_THRESHOLD}",
          "text": "${VAR_AIO_DP_ERROR_THRESHOLD}",
          "selected": false
        },
        "options": [
          {
            "value": "${VAR_AIO_DP_ERROR_THRESHOLD}",
            "text": "${VAR_AIO_DP_ERROR_THRESHOLD}",
            "selected": false
          }
        ]
      },
      {
        "description": "",
        "hide": 2,
        "name": "aio_dp_nats_utilization_threshold",
        "query": "${VAR_AIO_DP_NATS_UTILIZATION_THRESHOLD}",
        "skipUrlSync": false,
        "type": "constant",
        "current": {
          "value": "${VAR_AIO_DP_NATS_UTILIZATION_THRESHOLD}",
          "text": "${VAR_AIO_DP_NATS_UTILIZATION_THRESHOLD}",
          "selected": false
        },
        "options": [
          {
            "value": "${VAR_AIO_DP_NATS_UTILIZATION_THRESHOLD}",
            "text": "${VAR_AIO_DP_NATS_UTILIZATION_THRESHOLD}",
            "selected": false
          }
        ]
      },
      {
        "hide": 2,
        "name": "aio_dp_error_rate",
        "query": "${VAR_AIO_DP_ERROR_RATE}",
        "skipUrlSync": false,
        "type": "constant",
        "current": {
          "value": "${VAR_AIO_DP_ERROR_RATE}",
          "text": "${VAR_AIO_DP_ERROR_RATE}",
          "selected": false
        },
        "options": [
          {
            "value": "${VAR_AIO_DP_ERROR_RATE}",
            "text": "${VAR_AIO_DP_ERROR_RATE}",
            "selected": false
          }
        ]
      },
      {
        "hide": 2,
        "name": "aio_dp_latency_threshold_ms",
        "query": "${VAR_AIO_DP_LATENCY_THRESHOLD_MS}",
        "skipUrlSync": false,
        "type": "constant",
        "current": {
          "value": "${VAR_AIO_DP_LATENCY_THRESHOLD_MS}",
          "text": "${VAR_AIO_DP_LATENCY_THRESHOLD_MS}",
          "selected": false
        },
        "options": [
          {
            "value": "${VAR_AIO_DP_LATENCY_THRESHOLD_MS}",
            "text": "${VAR_AIO_DP_LATENCY_THRESHOLD_MS}",
            "selected": false
          }
        ]
      }
    ]
  },
  "time": {
    "from": "now-24h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "aio-health",
  "uid": "c4c37068-3940-40ba-8c20-67b3ce4923e9",
  "version": 17,
  "weekStart": ""
}