{
  "__inputs": [
    {
      "name": "DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST",
      "label": "Managed_Prometheus_jajens-azmonworkspace-test",
      "description": "",
      "type": "datasource",
      "pluginId": "prometheus",
      "pluginName": "Prometheus"
    }
  ],
  "__elements": {},
  "__requires": [
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "9.5.13"
    },
    {
      "type": "panel",
      "id": "piechart",
      "name": "Pie chart",
      "version": ""
    },
    {
      "type": "datasource",
      "id": "prometheus",
      "name": "Prometheus",
      "version": "1.0.0"
    },
    {
      "type": "panel",
      "id": "stat",
      "name": "Stat",
      "version": ""
    },
    {
      "type": "panel",
      "id": "state-timeline",
      "name": "State timeline",
      "version": ""
    },
    {
      "type": "panel",
      "id": "text",
      "name": "Text",
      "version": ""
    },
    {
      "type": "panel",
      "id": "timeseries",
      "name": "Time series",
      "version": ""
    }
  ],
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 1,
  "id": null,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
      },
      "description": "",
      "gridPos": {
        "h": 3,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 2,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<div style=\"background-color:#283747\">\n  <span style=\"color:#FFFFF8; font-size:28px\">Azure Edge Services - Infrastructure Health</span>\n</div>\n<div style=\"background-color:#595959; text-align: left\"> \n  <span style=\"color:white; font-size:18px\">&nbsp Infrastructure Workload Health by Component</span>\n</div>\n",
        "mode": "markdown"
      },
      "pluginVersion": "9.5.13",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "refId": "A"
        }
      ],
      "type": "text"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 3
      },
      "id": 133,
      "panels": [],
      "repeat": "component",
      "repeatDirection": "h",
      "title": "$component",
      "type": "row"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "fillOpacity": 70,
            "lineWidth": 0,
            "spanNulls": false
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "#808080",
                "value": null
              },
              {
                "color": "red",
                "value": 0
              },
              {
                "color": "yellow",
                "value": 0.5
              },
              {
                "color": "green",
                "value": 1
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 6,
        "x": 0,
        "y": 4
      },
      "id": 189,
      "options": {
        "alignValue": "left",
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "mergeValues": false,
        "rowHeight": 0.9,
        "showValue": "never",
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "## Workload Readiness health\r\n############################\r\nlabel_replace(min(\r\navg(label_join( # Workload ready percents (for deployment, daemonset, and statefulset)\r\n    label_replace(label_join(\r\n        kube_deployment_status_replicas_ready{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"} or\r\n        kube_daemonset_status_number_ready{cluster=~\"$cluster\",namespace=~\".*\",daemonset=~\"${component:raw}\"} or\r\n        kube_statefulset_status_replicas_ready{cluster=~\"$cluster\",namespace=~\".*\",statefulset=~\"${component:raw}\"}\r\n        ,\"workloadName\", \"\", \"deployment\", \"daemonset\", \"statefulset\")\r\n        ,\"workloadType\", \"$1\", \"__name__\", \"kube_(.*)_status_.*\")\r\n  / label_replace(label_join(\r\n        kube_daemonset_status_desired_number_scheduled{cluster=~\"$cluster\",namespace=~\".*\",daemonset=~\"${component:raw}\"} or\r\n        kube_deployment_spec_replicas{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"} or\r\n        kube_statefulset_status_replicas{cluster=~\"$cluster\",namespace=~\".*\",statefulset=~\"${component:raw}\"}\r\n        ,\"workloadName\", \"\", \"deployment\", \"daemonset\", \"statefulset\")\r\n        ,\"workloadType\", \"$1\", \"__name__\", \"kube_(.*)_(status|spec)_.*\")\r\n  ,\"workload\", \":\", \"workloadType\", \"workloadName\")\r\n) by (workload) >=0 \r\n) or vector(-1),\"_\",\"Workload Readiness\",\"\",\"\")",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "## Container Restart Health:\r\n############################\r\nlabel_replace(\r\n  sgn(sum_over_time(sum(rate(\r\n    kube_pod_container_status_restarts_total{cluster=~\"$cluster\",namespace=~\".*\",pod=~\"${component:raw}\"}[10m:1m]\r\n    )*60)[1h:]) > 5) * 0.0 # RED: Cumulative restarts over X(5) time greater than Y(1h)\r\n  or (max(rate(\r\n    kube_pod_container_status_restarts_total{cluster=~\"$cluster\",namespace=~\".*\",pod=~\"${component:raw}\"}[5m:1m]\r\n    )*60*5) > 0) * 0.5 # YELLOW: restarts detected but below Red threshold\r\n  or sgn(max(\r\n    kube_pod_container_status_restarts_total{cluster=~\"$cluster\",namespace=~\".*\",pod=~\"${component:raw}\"}\r\n    + 1 >= 0))\r\n  #or vector(1) # Healthy\r\n  ,\"_\",\"Container Restart Health\",\"\",\"\")\r\n## uncomment below to t-shoot this health metric\r\n# or label_replace(sum_over_time(sum(rate(kube_pod_container_status_restarts_total{cluster=~\"$cluster\"}[10m:1m])*60)[1h:]),\"_\",\"Total-restarts-over-time\",\"\",\"\")\r\n# or label_replace((max(rate(kube_pod_container_status_restarts_total{cluster=~\"$cluster\"}[5m:1m])*60*5) without (__name__,uid,instance,job) > 0),\"_\",\"restart\",\"\",\"\") # Base query for counting restarts\r\n",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "B"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "## Container CPU top-level health\r\n################################\r\nlabel_replace(\r\nmin(sgn( # Check for throttling > N indicating container is exceeding its CPU limits\r\n      rate(container_cpu_cfs_throttled_periods_total{cluster=~\"$cluster\",namespace=~\".*\",container!=\"\",pod=~\"${component:raw}\"}[10m]) \r\n    / rate(container_cpu_cfs_periods_total{cluster=~\"$cluster\",namespace=~\".*\",container!=\"\",pod=~\"${component:raw}\"}[10m])\r\n    >= 0.60) # If throttle create is greater than this percentage, we'll multiply sgn by 0.5 to show as error (or warning depending on threshold coloring)\r\n    ) # by (namespace,container) # These are commented out for top-level\r\n    * 0.0\r\nor\r\nmin(sgn( # Check for throttling > N indicating container is exceeding its CPU limits\r\n      rate(container_cpu_cfs_throttled_periods_total{cluster=~\"$cluster\",namespace=~\".*\",container!=\"\",pod=~\"${component:raw}\"}[10m]) \r\n    / rate(container_cpu_cfs_periods_total{cluster=~\"$cluster\",namespace=~\".*\",container!=\"\",pod=~\"${component:raw}\"}[10m])\r\n    >= 0.40) # If throttle create is greater than this percentage, we'll multiply sgn by 0.5 to show as error (or warning depending on threshold coloring)\r\n    ) # by (namespace,container) # These are commented out for top-level\r\n    * 0.5\r\nor\r\nmin( # Check to see if container is missing CPU Limits configuration\r\n    sgn(min(kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\".*\",container!=\"\",resource=\"cpu\",pod=~\"${component:raw}\"}) by (namespace,container))\r\n    or # if resource limit missing, we or to below to show namespace/container using CPU without limit as a zero to indicate red\r\n    sgn(min(container_cpu_usage_seconds_total{cluster=~\"$cluster\",namespace=~\".*\",container!=\"\",pod=~\"${component:raw}\"}) by (namespace,container))\r\n    # * 0 # TEMPORARILY DISABLING RED FOR MISSING LIMITS\r\n    ) #by (namespace,container) # These are commented out for top-level\r\n,\"_\",\"Container CPU Health\",\"\",\"\")",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "C"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "## Container Memory Health:\r\n###########################\r\nlabel_replace(\r\nmin( # Look for high memory utilization\r\n    0.0 * sgn((\r\n        max(container_memory_working_set_bytes{cluster=~\"$cluster\",namespace=~\".*\",container!=\"\",pod=~\"${component:raw}\"}) by (namespace,container)\r\n      / min(kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\".*\",container!=\"\",resource=\"memory\",pod=~\"${component:raw}\"}) by (namespace, container)\r\n    ) >= .95) or # show health state of 0 if container memory utilization >= 95%\r\n    0.5 * sgn((\r\n        max(container_memory_working_set_bytes{cluster=~\"$cluster\",namespace=~\".*\",container!=\"\",pod=~\"${component:raw}\"}) by (namespace,container)\r\n      / min(kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\".*\",container!=\"\",resource=\"memory\",pod=~\"${component:raw}\"}) by (namespace, container)\r\n    ) >= .80) or # show health state of 0.5 if container memory utilization >= 80%\r\n    vector(0)>0\r\n) #by (container) \r\nor\r\nmin( # Look for missing limits which we will show as 0 if missing\r\n    sgn(min(kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\".*\",container!=\"\",resource=\"memory\",pod=~\"${component:raw}\"}) by (namespace,container))\r\n    or # if resource limit missing, we or to below to show namespace/container using CPU without limit as a zero to indicate red\r\n    sgn(min(container_memory_working_set_bytes{cluster=~\"$cluster\",namespace=~\".*\",container!=\"\",pod=~\"${component:raw}\"}) by (namespace,container))\r\n    # * 0 # TEMPORARILY DISABLING RED FOR MISSING LIMITS\r\n) #by (container) \r\n,\"_\",\"Container Memory health\",\"\",\"\")",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "D"
        }
      ],
      "title": "Health Summary",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {},
            "renameByName": {
              "max(rate(container_cpu_usage_seconds_total{namespace=~\"alice-springs|symphony-k8s-system\",container=\"\",cpu=\"total\"}[5m])*300 > 0) ": "POD CPU (max)",
              "min( # Workload ready percents (for deployment, daemonset, replicaset, and statefulset)\r\n    label_replace(label_join(\r\n        {job=\"kube-state-metrics\",namespace=~\"alice-springs|symphony-k8s-system\",\r\n         __name__=~\"kube_(deployment|daemonset|replicaset|statefulset)_status_(replicas_ready|ready_replicas|number_ready)\"}\r\n        ,\"workload\", \"\", \"deployment\", \"daemonset\", \"replicaset\", \"statefulset\")\r\n        ,\"workloadType\", \"$1\", \"__name__\", \"kube_(.*)_status_.*\")\r\n  / label_replace(label_join(\r\n        {job=\"kube-state-metrics\",namespace=~\"alice-springs|symphony-k8s-system\",\r\n         __name__=~\"kube_(deployment|daemonset|replicaset|statefulset)_status_(replicas|desired_number_scheduled)\"}\r\n        ,\"workload\", \"\", \"deployment\", \"daemonset\", \"replicaset\", \"statefulset\")\r\n        ,\"workloadType\", \"$1\", \"__name__\", \"kube_(.*)_status_.*\")\r\n) #by (workloadType) #namespace) #, workloadType) #, workload)": "Workload ready health"
            }
          }
        }
      ],
      "type": "state-timeline"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "text",
            "mode": "fixed"
          },
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "red",
                "value": null
              },
              {
                "color": "green",
                "value": 20
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 2,
        "x": 6,
        "y": 4
      },
      "id": 174,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "center",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "9.5.13",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "label_replace(sum ( # by(workloadType) (\r\n#min(\r\n#  label_join( # Workload ready percents (for deployment, daemonset, and statefulset)\r\n    label_replace(label_join(\r\n        kube_daemonset_status_number_ready{cluster=~\"$cluster\",namespace=~\".*\",daemonset=~\"${component:raw}\"} or\r\n        kube_deployment_status_replicas_ready{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"} or\r\n        kube_statefulset_status_replicas_ready{cluster=~\"$cluster\",namespace=~\".*\",statefulset=~\"${component:raw}\"}\r\n        ,\"workloadName\", \"\", \"deployment\", \"daemonset\", \"replicaset\", \"statefulset\")\r\n        ,\"workloadType\", \"$1\", \"__name__\", \"kube_(.*)_status_.*\")\r\n),\"_\",\"Ready\",\"\",\"\")\r\n#  / label_replace(label_join(\r\n#        kube_daemonset_status_desired_number_scheduled{cluster=~\"$cluster\",namespace=~\"$namespace\",daemonset=~\"${component:raw}\"} or\r\n#        kube_deployment_spec_replicas{cluster=~\"$cluster\",namespace=~\"$namespace\",deployment=~\"${component:raw}\"} or\r\n#        kube_statefulset_status_replicas{cluster=~\"$cluster\",namespace=~\"$namespace\",statefulset=~\"${component:raw}\"}\r\n#        ,\"workloadName\", \"\", \"deployment\", \"daemonset\", \"statefulset\")\r\n#        ,\"workloadType\", \"$1\", \"__name__\", \"kube_(.*)_(status|spec)_.*\")\r\n#  ,\"workload\", \":\", \"workloadType\", \"workloadName\")\r\n#) by (workload) >=0 ",
          "legendFormat": "__auto",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "#min(\r\n#  label_join( # Workload ready percents (for deployment, daemonset, and statefulset)\r\n#    label_replace(label_join(\r\n#        kube_deployment_status_replicas_ready{cluster=~\"$cluster\",namespace=~\"$namespace\",deployment=~\"${component:raw}\"} or\r\n#        kube_daemonset_status_number_ready{cluster=~\"$cluster\",namespace=~\"$namespace\",daemonset=~\"${component:raw}\"} or\r\n#        kube_statefulset_status_replicas_ready{cluster=~\"$cluster\",namespace=~\"$namespace\",statefulset=~\"${component:raw}\"}\r\n#        ,\"workloadName\", \"\", \"deployment\", \"daemonset\", \"replicaset\", \"statefulset\")\r\n#        ,\"workloadType\", \"$1\", \"__name__\", \"kube_(.*)_status_.*\")\r\n#  / label_replace(label_join(\r\n  label_replace(sum(\r\n        kube_daemonset_status_desired_number_scheduled{cluster=~\"$cluster\",namespace=~\".*\",daemonset=~\"${component:raw}\"} or\r\n        kube_deployment_spec_replicas{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"} or\r\n        kube_statefulset_status_replicas{cluster=~\"$cluster\",namespace=~\".*\",statefulset=~\"${component:raw}\"}\r\n#        ,\"workloadName\", \"\", \"deployment\", \"daemonset\", \"statefulset\")\r\n#        ,\"workloadType\", \"$1\", \"__name__\", \"kube_(.*)_(status|spec)_.*\")\r\n    ),\"_\",\"Requested\",\"\",\"\")\r\n#  ,\"workload\", \":\", \"workloadType\", \"workloadName\")\r\n#) by (workload) >=0 ",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "B"
        }
      ],
      "title": "Workloads",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            }
          },
          "mappings": []
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Not-Ready"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-red",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Ready"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 4,
        "w": 2,
        "x": 8,
        "y": 4
      },
      "id": 184,
      "options": {
        "displayLabels": [
          "value"
        ],
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "pieType": "pie",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "label_replace(\r\n    sum(#sgn(\r\n        kube_daemonset_status_desired_number_scheduled{cluster=~\"$cluster\",namespace=~\".*\",daemonset=~\"${component:raw}\"} \r\n      - kube_daemonset_status_number_ready{cluster=~\"$cluster\",namespace=~\".*\",daemonset=~\"${component:raw}\"}\r\n      > 0)#)\r\n  ,\"status\",\"Not-Ready\",\"\",\"\")\r\nor \r\nlabel_replace(\r\n    sum(#sgn(\r\n        kube_daemonset_status_number_ready{cluster=~\"$cluster\",namespace=~\".*\",daemonset=~\"${component:raw}\"}\r\n      )#)\r\n  ,\"status\",\"Ready\",\"\",\"\")\r\nor label_replace(vector(0),\"status\",\"Ready\",\"\",\"\")\r\n# or label_replace(vector(1),\"status\",\"Not-Ready\",\"\",\"\") # UNCOMMENT THIS LINE TO TEST \"NOT-READY\" STATUS",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "label_replace(\r\n    label_replace(sum(sgn(\r\n        kube_deployment_spec_replicas{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"} \r\n      - kube_deployment_status_replicas_ready{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"}\r\n      > 0)),\"workload\",\"deployment\",\"\",\"\") or\r\n    label_replace(sum(sgn(\r\n        kube_daemonset_status_desired_number_scheduled{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"} \r\n      - kube_daemonset_status_number_ready{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"}\r\n      > 0)),\"workload\",\"daemonset\",\"\",\"\") or\r\n    label_replace(sum(sgn(\r\n        kube_statefulset_status_replicas{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"} \r\n      - kube_statefulset_status_replicas_ready{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"}\r\n      > 0)),\"workload\",\"statefulset\",\"\",\"\")\r\n  ,\"status\",\"Not-Ready\",\"\",\"\")\r\nor \r\nlabel_replace(\r\n    label_replace(sum(sgn(\r\n        kube_deployment_status_replicas_ready{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"}\r\n      )),\"workload\",\"deployment\",\"\",\"\") or\r\n    label_replace(sum(sgn(\r\n        kube_daemonset_status_number_ready{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"}\r\n      )),\"workload\",\"daemonset\",\"\",\"\") or\r\n    label_replace(sum(sgn(\r\n        kube_statefulset_status_replicas_ready{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"}\r\n      )),\"workload\",\"statefulset\",\"\",\"\")\r\n  ,\"status\",\"Ready\",\"\",\"\")\r\n",
          "hide": true,
          "legendFormat": "__auto",
          "range": true,
          "refId": "C"
        }
      ],
      "title": "DaemonSets",
      "type": "piechart"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            }
          },
          "mappings": []
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Not-Ready"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-red",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Ready"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 4,
        "w": 2,
        "x": 10,
        "y": 4
      },
      "id": 185,
      "options": {
        "displayLabels": [
          "value"
        ],
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "pieType": "pie",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "9.4.12",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "label_replace(\r\n    sum(#sgn(\r\n      kube_deployment_spec_replicas{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"} \r\n    - kube_deployment_status_replicas_ready{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"}\r\n    > 0)#)\r\n  ,\"status\",\"Not-Ready\",\"\",\"\")\r\nor \r\nlabel_replace(\r\n    sum(#sgn(\r\n      kube_deployment_status_replicas_ready{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"}\r\n    )#)\r\n  ,\"status\",\"Ready\",\"\",\"\")\r\nor label_replace(vector(0),\"status\",\"Ready\",\"\",\"\") # this is to zero if no workloads of this type exist\r\n# or label_replace(vector(1),\"status\",\"Not-Ready\",\"\",\"\") # UNCOMMENT THIS LINE TO TEST \"NOT-READY\" STATUS",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "label_replace(\r\n    label_replace(sum(sgn(\r\n        kube_deployment_spec_replicas{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"} \r\n      - kube_deployment_status_replicas_ready{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"}\r\n      > 0)),\"workload\",\"deployment\",\"\",\"\") or\r\n    label_replace(sum(sgn(\r\n        kube_daemonset_status_desired_number_scheduled{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"} \r\n      - kube_daemonset_status_number_ready{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"}\r\n      > 0)),\"workload\",\"daemonset\",\"\",\"\") or\r\n    label_replace(sum(sgn(\r\n        kube_statefulset_status_replicas{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"} \r\n      - kube_statefulset_status_replicas_ready{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"}\r\n      > 0)),\"workload\",\"statefulset\",\"\",\"\")\r\n  ,\"status\",\"Not-Ready\",\"\",\"\")\r\nor \r\nlabel_replace(\r\n    label_replace(sum(sgn(\r\n        kube_deployment_status_replicas_ready{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"}\r\n      )),\"workload\",\"deployment\",\"\",\"\") or\r\n    label_replace(sum(sgn(\r\n        kube_daemonset_status_number_ready{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"}\r\n      )),\"workload\",\"daemonset\",\"\",\"\") or\r\n    label_replace(sum(sgn(\r\n        kube_statefulset_status_replicas_ready{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"}\r\n      )),\"workload\",\"statefulset\",\"\",\"\")\r\n  ,\"status\",\"Ready\",\"\",\"\")\r\n",
          "hide": true,
          "legendFormat": "__auto",
          "range": true,
          "refId": "C"
        }
      ],
      "title": "Deployments",
      "type": "piechart"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            }
          },
          "mappings": []
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Not-Ready"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-red",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Ready"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 4,
        "w": 2,
        "x": 12,
        "y": 4
      },
      "id": 186,
      "options": {
        "displayLabels": [
          "value"
        ],
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "pieType": "pie",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "label_replace(\r\n      sum(#sgn(\r\n        kube_statefulset_status_replicas{cluster=~\"$cluster\",namespace=~\".*\",statefulset=~\"${component:raw}\"} \r\n      - kube_statefulset_status_replicas_ready{cluster=~\"$cluster\",namespace=~\".*\",statefulset=~\"${component:raw}\"}\r\n      > 0)#)\r\n  ,\"status\",\"Not-Ready\",\"\",\"\")\r\nor \r\nlabel_replace(\r\n      sum(#sgn(\r\n        kube_statefulset_status_replicas_ready{cluster=~\"$cluster\",namespace=~\".*\",statefulset=~\"${component:raw}\"}\r\n      )#)\r\n  ,\"status\",\"Ready\",\"\",\"\")\r\nor \r\nlabel_replace(vector(0),\"status\",\"Ready\",\"\",\"\")\r\n# or label_replace(vector(1),\"status\",\"Not-Ready\",\"\",\"\") # UNCOMMENT THIS LINE TO TEST \"NOT-READY\" STATUS",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "label_replace(\r\n    label_replace(sum(sgn(\r\n        kube_deployment_spec_replicas{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"} \r\n      - kube_deployment_status_replicas_ready{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"}\r\n      > 0)),\"workload\",\"deployment\",\"\",\"\") or\r\n    label_replace(sum(sgn(\r\n        kube_daemonset_status_desired_number_scheduled{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"} \r\n      - kube_daemonset_status_number_ready{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"}\r\n      > 0)),\"workload\",\"daemonset\",\"\",\"\") or\r\n    label_replace(sum(sgn(\r\n        kube_statefulset_status_replicas{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"} \r\n      - kube_statefulset_status_replicas_ready{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"}\r\n      > 0)),\"workload\",\"statefulset\",\"\",\"\")\r\n  ,\"status\",\"Not-Ready\",\"\",\"\")\r\nor \r\nlabel_replace(\r\n    label_replace(sum(sgn(\r\n        kube_deployment_status_replicas_ready{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"}\r\n      )),\"workload\",\"deployment\",\"\",\"\") or\r\n    label_replace(sum(sgn(\r\n        kube_daemonset_status_number_ready{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"}\r\n      )),\"workload\",\"daemonset\",\"\",\"\") or\r\n    label_replace(sum(sgn(\r\n        kube_statefulset_status_replicas_ready{cluster=~\"$cluster\",namespace=~\".*\",deployment=~\"${component:raw}\"}\r\n      )),\"workload\",\"statefulset\",\"\",\"\")\r\n  ,\"status\",\"Ready\",\"\",\"\")\r\n",
          "hide": true,
          "legendFormat": "__auto",
          "range": true,
          "refId": "C"
        }
      ],
      "title": "StatefulSets",
      "type": "piechart"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "yellow",
                "value": 1
              },
              {
                "color": "dark-orange",
                "value": 5
              },
              {
                "color": "red",
                "value": 10
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 2,
        "x": 14,
        "y": 4
      },
      "id": 187,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "9.5.13",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "# Container Restarts\r\nlabel_replace(ceil(sum_over_time(sum(rate(kube_pod_container_status_restarts_total{cluster=~\"$cluster\",namespace=~\".*\",pod=~\"${component:raw}\"}[10m:1m])*60)[1h:])),\"_\",\"Restarts\",\"\",\"\")\r\n",
          "legendFormat": "__auto",
          "range": true,
          "refId": "A"
        }
      ],
      "type": "stat"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "#EAB839",
                "value": 40
              },
              {
                "color": "red",
                "value": 60
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Percent containers with CPU Limits (%)"
            },
            "properties": [
              {
                "id": "custom.lineStyle",
                "value": {
                  "dash": [
                    10,
                    10
                  ],
                  "fill": "dash"
                }
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "super-light-purple",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "custom.axisColorMode",
                "value": "series"
              },
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "CPU Usage (milli-cores)"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "light-blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.axisPlacement",
                "value": "left"
              },
              {
                "id": "custom.axisColorMode",
                "value": "series"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "CPU Max Throttled (%)"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-orange",
                  "mode": "thresholds",
                  "seriesBy": "max"
                }
              },
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "custom.axisColorMode",
                "value": "series"
              },
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 4,
        "w": 4,
        "x": 16,
        "y": 4
      },
      "id": 282,
      "links": [],
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.4.12",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "# CPU Time (milli-cores version, if < 0.2 cores)\r\n(label_replace(sum(rate(container_cpu_usage_seconds_total{cluster=~\"$cluster\",namespace=~\".*\",pod=~\"${component:raw}\",container!=\"\"}[$__rate_interval]))*1000,\"_\",\"CPU Usage (milli-cores)\",\"\",\"\") )\r\n# Percent of containers with limits defined\r\nor label_replace(\r\n    count(kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\".*\",pod=~\"${component:raw}\",container!=\"\",resource=\"cpu\"}) /\r\n    count(container_cpu_usage_seconds_total{cluster=~\"$cluster\",namespace=~\".*\",pod=~\"${component:raw}\",container!=\"\",cpu=\"total\"}) *100\r\n    ,\"_\",\"Percent containers with CPU Limits (%)\",\"\",\"\")\r\n# CPU Throttling:\r\nor label_replace(100*(max(\r\n        rate(container_cpu_cfs_throttled_periods_total{cluster=~\"$cluster\",namespace=~\".*\",pod=~\"${component:raw}\",container!=\"\"}[10m])\r\n        / rate(container_cpu_cfs_periods_total{cluster=~\"$cluster\",namespace=~\".*\",pod=~\"${component:raw}\",container!=\"\"}[10m])\r\n    )),\"_\",\"CPU Max Throttled (%)\",\"\",\"\")\r\n",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "# Shows the max in millicores, used to determine which is shown (commented out for UX; only uncomment to debug above)\r\n#or label_replace(quantile_over_time(0.95,sum(rate(container_cpu_usage_seconds_total{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\"}[$__rate_interval]))[3d:])*1000,\"_\",\"CPU Usage (milli-cores) MAX\",\"\",\"\")\r\nvector(0)>0\r\n# Sum of all limits defined, in Cores\r\nor label_replace(sum(kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\",resource=\"cpu\"}),\"_\",\"CPU Limits (cores)\",\"\",\"\")\r\n# WIP:\r\nor label_replace(\r\n    count(kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\",resource=\"cpu\"}) /\r\n    count(container_cpu_usage_seconds_total{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\",cpu=\"total\"}) *100\r\n    ,\"_\",\"WIP-PERCENT_WITH_LIMITS\",\"\",\"\")\r\nor label_replace(count(\r\n    kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\",resource=\"cpu\"})\r\n    ,\"_\",\"WIP-NUMERATOR\",\"\",\"\")\r\nor label_replace(count(\r\n    container_cpu_usage_seconds_total{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\",cpu=\"total\"}) #without(cluster,container,cpu,id,image,instance,job,name,namespace,pod)\r\n    ,\"_\",\"WIP-DENOMINATOR\",\"\",\"\")\r\n# ",
          "hide": true,
          "legendFormat": "__auto",
          "range": true,
          "refId": "B"
        }
      ],
      "title": "CPU",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "#EAB839",
                "value": 80
              },
              {
                "color": "orange",
                "value": 85
              },
              {
                "color": "red",
                "value": 90
              },
              {
                "color": "dark-red",
                "value": 95
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Percent containers with Memory Limits (%)"
            },
            "properties": [
              {
                "id": "custom.lineStyle",
                "value": {
                  "dash": [
                    10,
                    10
                  ],
                  "fill": "dash"
                }
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "purple",
                  "mode": "fixed"
                }
              },
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "custom.axisPlacement",
                "value": "right"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Mem Working Bytes (MB)"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "light-blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.axisPlacement",
                "value": "left"
              },
              {
                "id": "custom.axisColorMode",
                "value": "series"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Mem Max Usage vs Limit (%)"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-orange",
                  "mode": "thresholds",
                  "seriesBy": "max"
                }
              },
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "custom.axisColorMode",
                "value": "series"
              },
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 4,
        "w": 4,
        "x": 20,
        "y": 4
      },
      "id": 283,
      "links": [],
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.4.12",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "# Memory Usage (MB version)\r\n(label_replace(sum(container_memory_working_set_bytes{cluster=~\"$cluster\",namespace=~\".*\",pod=~\"${component:raw}\",container!=\"\"})/(1024*1024),\"_\",\"Mem Working Bytes (MB)\",\"\",\"\") )\r\n# Percent containers with limits\r\nor label_replace(\r\n    count(kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\".*\",pod=~\"${component:raw}\",container!=\"\",resource=\"memory\"}) /\r\n    count(container_memory_working_set_bytes{cluster=~\"$cluster\",namespace=~\".*\",pod=~\"${component:raw}\",container!=\"\"}) *100\r\n    ,\"_\",\"Percent containers with Memory Limits (%)\",\"\",\"\")\r\n# Max Mem % Usage:\r\nor label_replace(100*(max(\r\n    max_over_time((max by(container)(container_memory_working_set_bytes{cluster=~\"$cluster\",namespace=~\".*\",pod=~\"${component:raw}\",container!=\"\"}))[10m:])\r\n    / max by(container)(kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\".*\",pod=~\"${component:raw}\",container!=\"\",resource=\"memory\"})\r\n    )),\"_\",\"Mem Max Usage vs Limit (%)\",\"\",\"\")\r\n",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "# Shows the max in millicores, used to determine which is shown (commented out for UX; only uncomment to debug above)\r\n#or label_replace(quantile_over_time(0.95,sum(rate(container_cpu_usage_seconds_total{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\"}[$__rate_interval]))[3d:])*1000,\"_\",\"CPU Usage (milli-cores) MAX\",\"\",\"\")\r\nvector(0)>0\r\n# Sum of all limits defined, in Cores\r\nor label_replace(sum(kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\",resource=\"cpu\"}),\"_\",\"CPU Limits (cores)\",\"\",\"\")\r\n# WIP:\r\nor label_replace(\r\n    count(kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\",resource=\"cpu\"}) /\r\n    count(container_cpu_usage_seconds_total{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\",cpu=\"total\"}) *100\r\n    ,\"_\",\"WIP-PERCENT_WITH_LIMITS\",\"\",\"\")\r\nor label_replace(count(\r\n    kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\",resource=\"cpu\"})\r\n    ,\"_\",\"WIP-NUMERATOR\",\"\",\"\")\r\nor label_replace(count(\r\n    container_cpu_usage_seconds_total{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\",cpu=\"total\"}) #without(cluster,container,cpu,id,image,instance,job,name,namespace,pod)\r\n    ,\"_\",\"WIP-DENOMINATOR\",\"\",\"\")\r\n# ",
          "hide": true,
          "legendFormat": "__auto",
          "range": true,
          "refId": "B"
        }
      ],
      "title": "Memory",
      "type": "timeseries"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 48
      },
      "id": 164,
      "panels": [],
      "title": "   ",
      "type": "row"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
      },
      "description": "",
      "gridPos": {
        "h": 2,
        "w": 24,
        "x": 0,
        "y": 49
      },
      "id": 150,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<div style=\"background-color:#595959; text-align: left\"> \n  <span style=\"color:white; font-size:18px\">&nbsp  Infrastructure Workload Health by Namespace</span>\n</div>\n",
        "mode": "markdown"
      },
      "pluginVersion": "9.5.12",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "refId": "A"
        }
      ],
      "type": "text"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 51
      },
      "id": 238,
      "panels": [],
      "repeat": "namespace4workloads",
      "repeatDirection": "h",
      "title": "$namespace4workloads",
      "type": "row"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "fillOpacity": 70,
            "lineWidth": 0,
            "spanNulls": false
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "#505050"
              },
              {
                "color": "red",
                "value": 0
              },
              {
                "color": "yellow",
                "value": 0.5
              },
              {
                "color": "green",
                "value": 1
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 6,
        "x": 0,
        "y": 52
      },
      "id": 240,
      "options": {
        "alignValue": "left",
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "mergeValues": false,
        "rowHeight": 0.9,
        "showValue": "never",
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "## Workload Readiness health\r\n############################\r\nlabel_replace(min(\r\navg(label_join( # Workload ready percents (for deployment, daemonset, and statefulset)\r\n    label_replace(label_join(\r\n        kube_deployment_status_replicas_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"} or\r\n        kube_daemonset_status_number_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",daemonset=~\".*\"} or\r\n        kube_statefulset_status_replicas_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",statefulset=~\".*\"}\r\n        ,\"workloadName\", \"\", \"deployment\", \"daemonset\", \"statefulset\")\r\n        ,\"workloadType\", \"$1\", \"__name__\", \"kube_(.*)_status_.*\")\r\n  / label_replace(label_join(\r\n        kube_daemonset_status_desired_number_scheduled{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",daemonset=~\".*\"} or\r\n        kube_deployment_spec_replicas{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"} or\r\n        kube_statefulset_status_replicas{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",statefulset=~\".*\"}\r\n        ,\"workloadName\", \"\", \"deployment\", \"daemonset\", \"statefulset\")\r\n        ,\"workloadType\", \"$1\", \"__name__\", \"kube_(.*)_(status|spec)_.*\")\r\n  ,\"workload\", \":\", \"workloadType\", \"workloadName\")\r\n) by (workload) >=0 \r\n) or vector(-1),\"_\",\"Workload Readiness\",\"\",\"\")",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "## Container Restart Health:\r\n############################\r\nlabel_replace(\r\n  sgn(sum_over_time(sum(rate(\r\n    kube_pod_container_status_restarts_total{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\"}[10m:1m]\r\n    )*60)[1h:]) > 5) * 0.0 # RED: Cumulative restarts over X(5) time greater than Y(1h)\r\n  or (max(rate(\r\n    kube_pod_container_status_restarts_total{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\"}[5m:1m]\r\n    )*60*5) > 0) * 0.5 # YELLOW: restarts detected but below Red threshold\r\n  or sgn(max(\r\n    kube_pod_container_status_restarts_total{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\"}\r\n    + 1 >= 0))\r\n  #or vector(1) # Healthy\r\n  ,\"_\",\"Container Restart Health\",\"\",\"\")\r\n## uncomment below to t-shoot this health metric\r\n# or label_replace(sum_over_time(sum(rate(kube_pod_container_status_restarts_total{cluster=~\"$cluster\"}[10m:1m])*60)[1h:]),\"_\",\"Total-restarts-over-time\",\"\",\"\")\r\n# or label_replace((max(rate(kube_pod_container_status_restarts_total{cluster=~\"$cluster\"}[5m:1m])*60*5) without (__name__,uid,instance,job) > 0),\"_\",\"restart\",\"\",\"\") # Base query for counting restarts\r\n",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "B"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "## Container CPU top-level health\r\n################################\r\nlabel_replace(\r\nmin(sgn( # Check for throttling > N indicating container is exceeding its CPU limits\r\n      rate(container_cpu_cfs_throttled_periods_total{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",container!=\"\",pod=~\".*\"}[10m]) \r\n    / rate(container_cpu_cfs_periods_total{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",container!=\"\",pod=~\".*\"}[10m])\r\n    >= 0.60) # If throttle create is greater than this percentage, we'll multiply sgn by 0.5 to show as error (or warning depending on threshold coloring)\r\n    ) # by (namespace,container) # These are commented out for top-level\r\n    * 0.0\r\nor\r\nmin(sgn( # Check for throttling > N indicating container is exceeding its CPU limits\r\n      rate(container_cpu_cfs_throttled_periods_total{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",container!=\"\",pod=~\".*\"}[10m]) \r\n    / rate(container_cpu_cfs_periods_total{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",container!=\"\",pod=~\".*\"}[10m])\r\n    >= 0.40) # If throttle create is greater than this percentage, we'll multiply sgn by 0.5 to show as error (or warning depending on threshold coloring)\r\n    ) # by (namespace,container) # These are commented out for top-level\r\n    * 0.5\r\nor\r\nmin( # Check to see if container is missing CPU Limits configuration\r\n    sgn(min(kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",container!=\"\",resource=\"cpu\",pod=~\".*\"}) by (namespace,container))\r\n    or # if resource limit missing, we or to below to show namespace/container using CPU without limit as a zero to indicate red\r\n    sgn(min(container_cpu_usage_seconds_total{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",container!=\"\",pod=~\".*\"}) by (namespace,container))\r\n    # * 0 # TEMPORARILY DISABLING RED FOR MISSING LIMITS\r\n    ) #by (namespace,container) # These are commented out for top-level\r\n,\"_\",\"Container CPU Health\",\"\",\"\")",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "C"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "## Container Memory Health:\r\n###########################\r\nlabel_replace(\r\nmin( # Look for high memory utilization\r\n    0.0 * sgn((\r\n        max(container_memory_working_set_bytes{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",container!=\"\"}) by (namespace,container)\r\n      / min(kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",container!=\"\",resource=\"memory\"}) by (namespace, container)\r\n    ) >= .95) or # show health state of 0 if container memory utilization >= 95%\r\n    0.5 * sgn((\r\n        max(container_memory_working_set_bytes{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",container!=\"\"}) by (namespace,container)\r\n      / min(kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",container!=\"\",resource=\"memory\"}) by (namespace, container)\r\n    ) >= .80) or # show health state of 0.5 if container memory utilization >= 80%\r\n    vector(0)>0\r\n) #by (container) \r\nor\r\nmin( # Look for missing limits which we will show as 0 if missing\r\n    sgn(min(kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",container!=\"\",resource=\"memory\",pod=~\".*\"}) by (namespace,container))\r\n    or # if resource limit missing, we or to below to show namespace/container using CPU without limit as a zero to indicate red\r\n    sgn(min(container_memory_working_set_bytes{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",container!=\"\",pod=~\".*\"}) by (namespace,container))\r\n    # * 0 # TEMPORARILY DISABLING RED FOR MISSING LIMITS\r\n) #by (container) \r\n,\"_\",\"Container Memory health\",\"\",\"\")",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "D"
        }
      ],
      "title": "Health Summary",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {},
            "renameByName": {
              "max(rate(container_cpu_usage_seconds_total{namespace=~\"alice-springs|symphony-k8s-system\",container=\"\",cpu=\"total\"}[5m])*300 > 0) ": "POD CPU (max)",
              "min( # Workload ready percents (for deployment, daemonset, replicaset, and statefulset)\r\n    label_replace(label_join(\r\n        {job=\"kube-state-metrics\",namespace=~\"alice-springs|symphony-k8s-system\",\r\n         __name__=~\"kube_(deployment|daemonset|replicaset|statefulset)_status_(replicas_ready|ready_replicas|number_ready)\"}\r\n        ,\"workload\", \"\", \"deployment\", \"daemonset\", \"replicaset\", \"statefulset\")\r\n        ,\"workloadType\", \"$1\", \"__name__\", \"kube_(.*)_status_.*\")\r\n  / label_replace(label_join(\r\n        {job=\"kube-state-metrics\",namespace=~\"alice-springs|symphony-k8s-system\",\r\n         __name__=~\"kube_(deployment|daemonset|replicaset|statefulset)_status_(replicas|desired_number_scheduled)\"}\r\n        ,\"workload\", \"\", \"deployment\", \"daemonset\", \"replicaset\", \"statefulset\")\r\n        ,\"workloadType\", \"$1\", \"__name__\", \"kube_(.*)_status_.*\")\r\n) #by (workloadType) #namespace) #, workloadType) #, workload)": "Workload ready health"
            }
          }
        }
      ],
      "type": "state-timeline"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "text",
            "mode": "fixed"
          },
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "red"
              },
              {
                "color": "green",
                "value": 20
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 2,
        "x": 6,
        "y": 52
      },
      "id": 243,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "center",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "9.5.12",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "label_replace(sum ( # by(workloadType) (\r\n#min(\r\n#  label_join( # Workload ready percents (for deployment, daemonset, and statefulset)\r\n    label_replace(label_join(\r\n        kube_daemonset_status_number_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",daemonset=~\".*\"} or\r\n        kube_deployment_status_replicas_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"} or\r\n        kube_statefulset_status_replicas_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",statefulset=~\".*\"}\r\n        ,\"workloadName\", \"\", \"deployment\", \"daemonset\", \"replicaset\", \"statefulset\")\r\n        ,\"workloadType\", \"$1\", \"__name__\", \"kube_(.*)_status_.*\")\r\n),\"_\",\"Ready\",\"\",\"\")\r\n#  / label_replace(label_join(\r\n#        kube_daemonset_status_desired_number_scheduled{cluster=~\"$cluster\",namespace=~\"$namespace\",daemonset=~\".*\"} or\r\n#        kube_deployment_spec_replicas{cluster=~\"$cluster\",namespace=~\"$namespace\",deployment=~\".*\"} or\r\n#        kube_statefulset_status_replicas{cluster=~\"$cluster\",namespace=~\"$namespace\",statefulset=~\".*\"}\r\n#        ,\"workloadName\", \"\", \"deployment\", \"daemonset\", \"statefulset\")\r\n#        ,\"workloadType\", \"$1\", \"__name__\", \"kube_(.*)_(status|spec)_.*\")\r\n#  ,\"workload\", \":\", \"workloadType\", \"workloadName\")\r\n#) by (workload) >=0 ",
          "legendFormat": "__auto",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "#min(\r\n#  label_join( # Workload ready percents (for deployment, daemonset, and statefulset)\r\n#    label_replace(label_join(\r\n#        kube_deployment_status_replicas_ready{cluster=~\"$cluster\",namespace=~\"$namespace\",deployment=~\".*\"} or\r\n#        kube_daemonset_status_number_ready{cluster=~\"$cluster\",namespace=~\"$namespace\",daemonset=~\".*\"} or\r\n#        kube_statefulset_status_replicas_ready{cluster=~\"$cluster\",namespace=~\"$namespace\",statefulset=~\".*\"}\r\n#        ,\"workloadName\", \"\", \"deployment\", \"daemonset\", \"replicaset\", \"statefulset\")\r\n#        ,\"workloadType\", \"$1\", \"__name__\", \"kube_(.*)_status_.*\")\r\n#  / label_replace(label_join(\r\n  label_replace(sum(\r\n        kube_daemonset_status_desired_number_scheduled{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",daemonset=~\".*\"} or\r\n        kube_deployment_spec_replicas{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"} or\r\n        kube_statefulset_status_replicas{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",statefulset=~\".*\"}\r\n#        ,\"workloadName\", \"\", \"deployment\", \"daemonset\", \"statefulset\")\r\n#        ,\"workloadType\", \"$1\", \"__name__\", \"kube_(.*)_(status|spec)_.*\")\r\n    ),\"_\",\"Requested\",\"\",\"\")\r\n#  ,\"workload\", \":\", \"workloadType\", \"workloadName\")\r\n#) by (workload) >=0 ",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "B"
        }
      ],
      "title": "Workloads",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            }
          },
          "mappings": []
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Not-Ready"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-red",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Ready"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 4,
        "w": 2,
        "x": 8,
        "y": 52
      },
      "id": 247,
      "links": [
        {
          "targetBlank": true,
          "title": "AKS Reports - k8s / Compute Resources / Workload",
          "url": "/d/a164a7f0339f99e89cea5cb47e9b6738/kubernetes-compute-resources-workload?﻿${__url_time_range}&${cluster:queryparam}﻿&var-namespace=${namespace4workloads}&var-type=daemonset"
        }
      ],
      "options": {
        "displayLabels": [
          "value"
        ],
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "pieType": "pie",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "label_replace(\r\n    sum(#sgn(\r\n        kube_daemonset_status_desired_number_scheduled{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",daemonset=~\".*\"} \r\n      - kube_daemonset_status_number_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",daemonset=~\".*\"}\r\n      > 0)#)\r\n  ,\"status\",\"Not-Ready\",\"\",\"\")\r\nor \r\nlabel_replace(\r\n    sum(#sgn(\r\n        kube_daemonset_status_number_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",daemonset=~\".*\"}\r\n      )#)\r\n  ,\"status\",\"Ready\",\"\",\"\")\r\nor label_replace(vector(0),\"status\",\"Ready\",\"\",\"\")\r\n# or label_replace(vector(1),\"status\",\"Not-Ready\",\"\",\"\") # UNCOMMENT THIS LINE TO TEST \"NOT-READY\" STATUS",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "label_replace(\r\n    label_replace(sum(sgn(\r\n        kube_deployment_spec_replicas{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"} \r\n      - kube_deployment_status_replicas_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"}\r\n      > 0)),\"workload\",\"deployment\",\"\",\"\") or\r\n    label_replace(sum(sgn(\r\n        kube_daemonset_status_desired_number_scheduled{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"} \r\n      - kube_daemonset_status_number_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"}\r\n      > 0)),\"workload\",\"daemonset\",\"\",\"\") or\r\n    label_replace(sum(sgn(\r\n        kube_statefulset_status_replicas{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"} \r\n      - kube_statefulset_status_replicas_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"}\r\n      > 0)),\"workload\",\"statefulset\",\"\",\"\")\r\n  ,\"status\",\"Not-Ready\",\"\",\"\")\r\nor \r\nlabel_replace(\r\n    label_replace(sum(sgn(\r\n        kube_deployment_status_replicas_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"}\r\n      )),\"workload\",\"deployment\",\"\",\"\") or\r\n    label_replace(sum(sgn(\r\n        kube_daemonset_status_number_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"}\r\n      )),\"workload\",\"daemonset\",\"\",\"\") or\r\n    label_replace(sum(sgn(\r\n        kube_statefulset_status_replicas_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"}\r\n      )),\"workload\",\"statefulset\",\"\",\"\")\r\n  ,\"status\",\"Ready\",\"\",\"\")\r\n",
          "hide": true,
          "legendFormat": "__auto",
          "range": true,
          "refId": "C"
        }
      ],
      "title": "DaemonSets",
      "type": "piechart"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            }
          },
          "mappings": []
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Not-Ready"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-red",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Ready"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 4,
        "w": 2,
        "x": 10,
        "y": 52
      },
      "id": 252,
      "links": [
        {
          "targetBlank": true,
          "title": "AKS Reports - k8s / Compute Resources / Workload",
          "url": "/d/a164a7f0339f99e89cea5cb47e9b6738/kubernetes-compute-resources-workload?﻿${__url_time_range}&${cluster:queryparam}﻿&var-namespace=${namespace4workloads}&var-type=deployment"
        }
      ],
      "options": {
        "displayLabels": [
          "value"
        ],
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "pieType": "pie",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "9.4.12",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "label_replace(\r\n    sum(#sgn(\r\n      kube_deployment_spec_replicas{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"} \r\n    - kube_deployment_status_replicas_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"}\r\n    > 0)#)\r\n  ,\"status\",\"Not-Ready\",\"\",\"\")\r\nor \r\nlabel_replace(\r\n    sum(#sgn(\r\n      kube_deployment_status_replicas_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"}\r\n    )#)\r\n  ,\"status\",\"Ready\",\"\",\"\")\r\nor label_replace(vector(0),\"status\",\"Ready\",\"\",\"\") # this is to zero if no workloads of this type exist\r\n# or label_replace(vector(1),\"status\",\"Not-Ready\",\"\",\"\") # UNCOMMENT THIS LINE TO TEST \"NOT-READY\" STATUS",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "label_replace(\r\n    label_replace(sum(sgn(\r\n        kube_deployment_spec_replicas{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"} \r\n      - kube_deployment_status_replicas_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"}\r\n      > 0)),\"workload\",\"deployment\",\"\",\"\") or\r\n    label_replace(sum(sgn(\r\n        kube_daemonset_status_desired_number_scheduled{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"} \r\n      - kube_daemonset_status_number_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"}\r\n      > 0)),\"workload\",\"daemonset\",\"\",\"\") or\r\n    label_replace(sum(sgn(\r\n        kube_statefulset_status_replicas{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"} \r\n      - kube_statefulset_status_replicas_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"}\r\n      > 0)),\"workload\",\"statefulset\",\"\",\"\")\r\n  ,\"status\",\"Not-Ready\",\"\",\"\")\r\nor \r\nlabel_replace(\r\n    label_replace(sum(sgn(\r\n        kube_deployment_status_replicas_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"}\r\n      )),\"workload\",\"deployment\",\"\",\"\") or\r\n    label_replace(sum(sgn(\r\n        kube_daemonset_status_number_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"}\r\n      )),\"workload\",\"daemonset\",\"\",\"\") or\r\n    label_replace(sum(sgn(\r\n        kube_statefulset_status_replicas_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"}\r\n      )),\"workload\",\"statefulset\",\"\",\"\")\r\n  ,\"status\",\"Ready\",\"\",\"\")\r\n",
          "hide": true,
          "legendFormat": "__auto",
          "range": true,
          "refId": "C"
        }
      ],
      "title": "Deployments",
      "type": "piechart"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            }
          },
          "mappings": []
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Not-Ready"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-red",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Ready"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 4,
        "w": 2,
        "x": 12,
        "y": 52
      },
      "id": 258,
      "links": [
        {
          "targetBlank": true,
          "title": "AKS Reports - k8s / Compute Resources / Workload",
          "url": "/d/a164a7f0339f99e89cea5cb47e9b6738/kubernetes-compute-resources-workload?﻿${__url_time_range}&${cluster:queryparam}﻿&var-namespace=${namespace4workloads}&var-type=statefulset"
        }
      ],
      "options": {
        "displayLabels": [
          "value"
        ],
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "pieType": "pie",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "label_replace(\r\n      sum(#sgn(\r\n        kube_statefulset_status_replicas{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",statefulset=~\".*\"} \r\n      - kube_statefulset_status_replicas_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",statefulset=~\".*\"}\r\n      > 0)#)\r\n  ,\"status\",\"Not-Ready\",\"\",\"\")\r\nor \r\nlabel_replace(\r\n      sum(#sgn(\r\n        kube_statefulset_status_replicas_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",statefulset=~\".*\"}\r\n      )#)\r\n  ,\"status\",\"Ready\",\"\",\"\")\r\nor \r\nlabel_replace(vector(0),\"status\",\"Ready\",\"\",\"\")\r\n# or label_replace(vector(1),\"status\",\"Not-Ready\",\"\",\"\") # UNCOMMENT THIS LINE TO TEST \"NOT-READY\" STATUS",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "label_replace(\r\n    label_replace(sum(sgn(\r\n        kube_deployment_spec_replicas{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"} \r\n      - kube_deployment_status_replicas_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"}\r\n      > 0)),\"workload\",\"deployment\",\"\",\"\") or\r\n    label_replace(sum(sgn(\r\n        kube_daemonset_status_desired_number_scheduled{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"} \r\n      - kube_daemonset_status_number_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"}\r\n      > 0)),\"workload\",\"daemonset\",\"\",\"\") or\r\n    label_replace(sum(sgn(\r\n        kube_statefulset_status_replicas{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"} \r\n      - kube_statefulset_status_replicas_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"}\r\n      > 0)),\"workload\",\"statefulset\",\"\",\"\")\r\n  ,\"status\",\"Not-Ready\",\"\",\"\")\r\nor \r\nlabel_replace(\r\n    label_replace(sum(sgn(\r\n        kube_deployment_status_replicas_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"}\r\n      )),\"workload\",\"deployment\",\"\",\"\") or\r\n    label_replace(sum(sgn(\r\n        kube_daemonset_status_number_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"}\r\n      )),\"workload\",\"daemonset\",\"\",\"\") or\r\n    label_replace(sum(sgn(\r\n        kube_statefulset_status_replicas_ready{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",deployment=~\".*\"}\r\n      )),\"workload\",\"statefulset\",\"\",\"\")\r\n  ,\"status\",\"Ready\",\"\",\"\")\r\n",
          "hide": true,
          "legendFormat": "__auto",
          "range": true,
          "refId": "C"
        }
      ],
      "title": "StatefulSets",
      "type": "piechart"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "yellow",
                "value": 1
              },
              {
                "color": "dark-orange",
                "value": 5
              },
              {
                "color": "red",
                "value": 10
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 2,
        "x": 14,
        "y": 52
      },
      "id": 265,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      },
      "pluginVersion": "9.5.12",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "# Container Restarts\r\nlabel_replace(ceil(sum_over_time(sum(rate(kube_pod_container_status_restarts_total{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\"}[10m:1m])*60)[1h:])),\"_\",\"Restarts\",\"\",\"\")\r\n",
          "legendFormat": "__auto",
          "range": true,
          "refId": "A"
        }
      ],
      "type": "stat"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "#EAB839",
                "value": 40
              },
              {
                "color": "red",
                "value": 60
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Percent containers with CPU Limits (%)"
            },
            "properties": [
              {
                "id": "custom.lineStyle",
                "value": {
                  "dash": [
                    10,
                    10
                  ],
                  "fill": "dash"
                }
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "super-light-purple",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "custom.axisColorMode",
                "value": "series"
              },
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "CPU Usage (milli-cores)"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "light-blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.axisPlacement",
                "value": "left"
              },
              {
                "id": "custom.axisColorMode",
                "value": "series"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "CPU Max Throttled (%)"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-orange",
                  "mode": "thresholds",
                  "seriesBy": "max"
                }
              },
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "custom.axisColorMode",
                "value": "series"
              },
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 4,
        "w": 4,
        "x": 16,
        "y": 52
      },
      "id": 275,
      "links": [
        {
          "targetBlank": true,
          "title": "AKS Reports - K8s / Compute Resources / Namespace",
          "url": "/d/85a562078cdf77779eaa1add43cc6738/kubernetes-compute-resources-namespace-pods?﻿${__url_time_range}&${cluster:queryparam}﻿&var-namespace=${namespace4workloads}"
        },
        {
          "targetBlank": true,
          "title": "AKS Reports - K8s / Compute Resources / Pod",
          "url": "/d/6581e46e4e5c7ba40a07646395ef6738/kubernetes-compute-resources-pod?﻿${__url_time_range}&${cluster:queryparam}﻿&var-namespace=${namespace4workloads}"
        }
      ],
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.4.12",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "# CPU Time (milli-cores version, if < 0.2 cores)\r\n(label_replace(sum(rate(container_cpu_usage_seconds_total{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\"}[$__rate_interval]))*1000,\"_\",\"CPU Usage (milli-cores)\",\"\",\"\") )\r\n# Percent of containers with limits defined\r\nor label_replace(\r\n    count(kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\",resource=\"cpu\"}) /\r\n    count(container_cpu_usage_seconds_total{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\",cpu=\"total\"}) *100\r\n    ,\"_\",\"Percent containers with CPU Limits (%)\",\"\",\"\")\r\n# CPU Throttling:\r\nor label_replace(100*(max(\r\n        rate(container_cpu_cfs_throttled_periods_total{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\"}[10m])\r\n        / rate(container_cpu_cfs_periods_total{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\"}[10m])\r\n    )),\"_\",\"CPU Max Throttled (%)\",\"\",\"\")\r\n",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "# Shows the max in millicores, used to determine which is shown (commented out for UX; only uncomment to debug above)\r\n#or label_replace(quantile_over_time(0.95,sum(rate(container_cpu_usage_seconds_total{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\"}[$__rate_interval]))[3d:])*1000,\"_\",\"CPU Usage (milli-cores) MAX\",\"\",\"\")\r\nvector(0)>0\r\n# Sum of all limits defined, in Cores\r\nor label_replace(sum(kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\",resource=\"cpu\"}),\"_\",\"CPU Limits (cores)\",\"\",\"\")\r\n# WIP:\r\nor label_replace(\r\n    count(kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\",resource=\"cpu\"}) /\r\n    count(container_cpu_usage_seconds_total{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\",cpu=\"total\"}) *100\r\n    ,\"_\",\"WIP-PERCENT_WITH_LIMITS\",\"\",\"\")\r\nor label_replace(count(\r\n    kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\",resource=\"cpu\"})\r\n    ,\"_\",\"WIP-NUMERATOR\",\"\",\"\")\r\nor label_replace(count(\r\n    container_cpu_usage_seconds_total{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\",cpu=\"total\"}) #without(cluster,container,cpu,id,image,instance,job,name,namespace,pod)\r\n    ,\"_\",\"WIP-DENOMINATOR\",\"\",\"\")\r\n# ",
          "hide": true,
          "legendFormat": "__auto",
          "range": true,
          "refId": "B"
        }
      ],
      "title": "CPU",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "#EAB839",
                "value": 80
              },
              {
                "color": "orange",
                "value": 85
              },
              {
                "color": "red",
                "value": 90
              },
              {
                "color": "dark-red",
                "value": 95
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Percent containers with Memory Limits (%)"
            },
            "properties": [
              {
                "id": "custom.lineStyle",
                "value": {
                  "dash": [
                    10,
                    10
                  ],
                  "fill": "dash"
                }
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "purple",
                  "mode": "fixed"
                }
              },
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "custom.axisPlacement",
                "value": "right"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Mem Working Bytes (MB)"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "light-blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.axisPlacement",
                "value": "left"
              },
              {
                "id": "custom.axisColorMode",
                "value": "series"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Mem Max Usage vs Limit (%)"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-orange",
                  "mode": "thresholds",
                  "seriesBy": "max"
                }
              },
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "custom.axisColorMode",
                "value": "series"
              },
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 4,
        "w": 4,
        "x": 20,
        "y": 52
      },
      "id": 281,
      "links": [
        {
          "targetBlank": true,
          "title": "AKS Reports - K8s / Compute Resources / Namespace",
          "url": "/d/85a562078cdf77779eaa1add43cc6738/kubernetes-compute-resources-namespace-pods?﻿${__url_time_range}&${cluster:queryparam}﻿&var-namespace=${namespace4workloads}"
        },
        {
          "targetBlank": true,
          "title": "AKS Reports - K8s / Compute Resources / Pod",
          "url": "/d/6581e46e4e5c7ba40a07646395ef6738/kubernetes-compute-resources-pod?﻿${__url_time_range}&${cluster:queryparam}﻿&var-namespace=${namespace4workloads}"
        }
      ],
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.4.12",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "# Memory Usage (MB version)\r\n(label_replace(sum(container_memory_working_set_bytes{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\"})/(1024*1024),\"_\",\"Mem Working Bytes (MB)\",\"\",\"\") )\r\n# Percent containers with limits\r\nor label_replace(\r\n    count(kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\",resource=\"memory\"}) /\r\n    count(container_memory_working_set_bytes{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\"}) *100\r\n    ,\"_\",\"Percent containers with Memory Limits (%)\",\"\",\"\")\r\n# Max Mem % Usage:\r\nor label_replace(100*(max(\r\n    max_over_time((max by(container)(container_memory_working_set_bytes{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\"}))[10m:])\r\n    / max by(container)(kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\",resource=\"memory\"})\r\n    )),\"_\",\"Mem Max Usage vs Limit (%)\",\"\",\"\")\r\n",
          "hide": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
          },
          "editorMode": "code",
          "expr": "# Shows the max in millicores, used to determine which is shown (commented out for UX; only uncomment to debug above)\r\n#or label_replace(quantile_over_time(0.95,sum(rate(container_cpu_usage_seconds_total{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\"}[$__rate_interval]))[3d:])*1000,\"_\",\"CPU Usage (milli-cores) MAX\",\"\",\"\")\r\nvector(0)>0\r\n# Sum of all limits defined, in Cores\r\nor label_replace(sum(kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\",resource=\"cpu\"}),\"_\",\"CPU Limits (cores)\",\"\",\"\")\r\n# WIP:\r\nor label_replace(\r\n    count(kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\",resource=\"cpu\"}) /\r\n    count(container_cpu_usage_seconds_total{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\",cpu=\"total\"}) *100\r\n    ,\"_\",\"WIP-PERCENT_WITH_LIMITS\",\"\",\"\")\r\nor label_replace(count(\r\n    kube_pod_container_resource_limits{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\",resource=\"cpu\"})\r\n    ,\"_\",\"WIP-NUMERATOR\",\"\",\"\")\r\nor label_replace(count(\r\n    container_cpu_usage_seconds_total{cluster=~\"$cluster\",namespace=~\"$namespace4workloads\",pod=~\".*\",container!=\"\",cpu=\"total\"}) #without(cluster,container,cpu,id,image,instance,job,name,namespace,pod)\r\n    ,\"_\",\"WIP-DENOMINATOR\",\"\",\"\")\r\n# ",
          "hide": true,
          "legendFormat": "__auto",
          "range": true,
          "refId": "B"
        }
      ],
      "title": "Memory",
      "type": "timeseries"
    }
  ],
  "refresh": "",
  "revision": 1,
  "schemaVersion": 38,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "Managed_Prometheus_jajens-azmonworkspace-test",
          "value": "Managed_Prometheus_jajens-azmonworkspace-test"
        },
        "hide": 2,
        "includeAll": false,
        "label": "datasource",
        "multi": false,
        "name": "prometheus",
        "options": [],
        "query": "prometheus",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "type": "datasource"
      },
      {
        "current": {},
        "datasource": {
          "type": "prometheus",
          "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
        },
        "definition": "kube_node_status_condition",
        "description": "PAS Cluster to view",
        "hide": 0,
        "includeAll": false,
        "label": "cluster",
        "multi": false,
        "name": "cluster",
        "options": [],
        "query": {
          "query": "kube_node_status_condition",
          "refId": "StandardVariableQuery"
        },
        "refresh": 2,
        "regex": "/.*cluster=\"([^\"]*).*/",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {},
        "datasource": {
          "type": "prometheus",
          "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
        },
        "definition": "kube_namespace_status_phase{cluster=~\"$cluster\", phase!~\"terminating\"}",
        "hide": 0,
        "includeAll": true,
        "label": "namespaces",
        "multi": true,
        "name": "namespace",
        "options": [],
        "query": {
          "query": "kube_namespace_status_phase{cluster=~\"$cluster\", phase!~\"terminating\"}",
          "refId": "PrometheusVariableQueryEditor-VariableQuery"
        },
        "refresh": 2,
        "regex": "/.*namespace=\"([^\"]*).*/",
        "skipUrlSync": false,
        "sort": 1,
        "type": "query"
      },
      {
        "current": {},
        "datasource": {
          "type": "prometheus",
          "uid": "${DS_MANAGED_PROMETHEUS_JAJENS-AZMONWORKSPACE-TEST}"
        },
        "definition": "kube_pod_status_phase{cluster=~\"$cluster\",namespace=~\"$namespace\"}",
        "description": "Subset of existing namespace selection to filter only those with workloads",
        "hide": 2,
        "includeAll": true,
        "multi": true,
        "name": "namespace4workloads",
        "options": [],
        "query": {
          "query": "kube_pod_status_phase{cluster=~\"$cluster\",namespace=~\"$namespace\"}",
          "refId": "StandardVariableQuery"
        },
        "refresh": 2,
        "regex": "/.*namespace=\"([^\"]*).*/",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "description": "PAS Components",
        "hide": 0,
        "includeAll": true,
        "label": "Component",
        "multi": true,
        "name": "component",
        "options": [
          {
            "selected": true,
            "text": "All",
            "value": "$__all"
          },
          {
            "selected": false,
            "text": "AIO-DataProcessor",
            "value": "^aio-(dp-).*"
          },
          {
            "selected": false,
            "text": "AIO-MQ",
            "value": "^aio-(mq-).*"
          },
          {
            "selected": false,
            "text": "AIO-LayeredNetworkManagement",
            "value": "^(aio-lnm-|lnm).*"
          },
          {
            "selected": false,
            "text": "AIO-OPCUABroker",
            "value": "^aio-(opc-).*"
          },
          {
            "selected": false,
            "text": "AIO-Orchestrator",
            "value": "^aio-(cert-|orc-).*"
          },
          {
            "selected": false,
            "text": "AzMon",
            "value": "^(ama-|azuremonitor).*"
          },
          {
            "selected": false,
            "text": "OLD-AKRI",
            "value": "^(akri-).*"
          },
          {
            "selected": false,
            "text": "OLD-OBS",
            "value": "^(obs|lok|flu|otel|pro|tem).*"
          },
          {
            "selected": false,
            "text": "AIO-3P-Support",
            "value": "^(aio-otel|telegraf).*"
          }
        ],
        "query": "AIO-DataProcessor : ^aio-(dp-).*,AIO-MQ : ^aio-(mq-).*,AIO-LayeredNetworkManagement : ^(aio-lnm-|lnm).*,AIO-OPCUABroker : ^aio-(opc-).*,AIO-Orchestrator : ^aio-(cert-|orc-).*,AzMon : ^(ama-|azuremonitor).*,OLD-AKRI : ^(akri-).*,OLD-OBS : ^(obs|lok|flu|otel|pro|tem).*,AIO-3P-Support : ^(aio-otel|telegraf).*",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      }
    ]
  },
  "time": {
    "from": "now-2d",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "aio-health-infra-workload",
  "uid": "E5cCeHj4z",
  "version": 53,
  "weekStart": ""
}